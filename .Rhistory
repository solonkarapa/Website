geom_line() +
geom_point(size = 3) +
ylim(0, 1000) +
ylab("Tlim, sec") +
xlab("") +
geom_point(aes(y = c(555*0.965, (999 + 12)*0.965, x = c("Control test", "NFNC test")), col = "red", size = 3)
x <- c(300, 320, 327, 415, 420, 428, 433, 480, 495, 548, 550, 555)*0.965
y <- (c(365, 384, 380, 480, 470, 540, 540, 550, 540, 610, 560, 999) + 12)*0.965
id <- rep(1:12)
time <- c(rep("Control test", 12), rep("NFNC test", 12))
data <- data.frame(id = c(id, id), value = c(x, y), time = time)
library("ggplot2")
ggplot(data = data, aes(x = time, y = value, group = id)) +
geom_line() +
geom_point(size = 3) +
ylim(0, 1000) +
ylab("Tlim, sec") +
xlab("") +
geom_point(aes(y = c(555*0.965, (999 + 12)*0.965), x = c("Control test", "NFNC test")), col = "red", size = 3)
x <- c(300, 320, 327, 415, 420, 428, 433, 480, 495, 548, 550, 555)*0.965
y <- (c(365, 384, 380, 480, 470, 540, 540, 550, 540, 610, 560, 999) + 12)*0.965
id <- rep(1:12)
time <- c(rep("Control test", 12), rep("NFNC test", 12))
data <- data.frame(id = c(id, id), value = c(x, y), time = time)
library("ggplot2")
ggplot(data = data, aes(x = time, y = value, group = id)) +
geom_line() +
geom_point(size = 3) +
ylim(0, 1000) +
ylab("Tlim, sec") +
xlab("") +
geom_point(aes(y = 999 + 12)*0.965, x = "NFNC test"), col = "red", size = 3) +
x <- c(300, 320, 327, 415, 420, 428, 433, 480, 495, 548, 550, 555)*0.965
y <- (c(365, 384, 380, 480, 470, 540, 540, 550, 540, 610, 560, 999) + 12)*0.965
id <- rep(1:12)
time <- c(rep("Control test", 12), rep("NFNC test", 12))
data <- data.frame(id = c(id, id), value = c(x, y), time = time)
library("ggplot2")
ggplot(data = data, aes(x = time, y = value, group = id)) +
geom_line() +
geom_point(size = 3) +
ylim(0, 1000) +
ylab("Tlim, sec") +
xlab("") +
geom_point(aes(y = (999 + 12)*0.965, x = "NFNC test"), col = "red", size = 3) +
geom_point(aes(y = 555*0.965, x = "Control test"), col = "red", size = 3)
blogdown:::serve_site()
9285/40444
4922/40444
4922+3434/40444
(4922+3434)/40444
4922+3434
11954/40444
(40444-1406)/40444
(40444-14069)/40444
blogdown:::serve_site()
library(MASS)
library(tidyr)
#library(vegan)
library(zoo)
library(lsmeans)
library(MuMIn)
library(reshape)
library(plyr)
#library(ape)
# Load SE Function ----------------------------------------------------------------
SE = function(x)
{
sqrt(var(x,na.rm = T)/length(x))
}
# Load Data ----------------------------------------------------------------
Plastic = data.frame(read.table('FINALDATASET.csv', header = T, sep = ','))
# not used intitially
# PlasticWaste = data.frame(read.table('PlasticWaste.csv',header=T,sep=','))
TransectLengths = data.frame(read.table('TRANSECT_LENGTH_FINAL.csv',
header = T, sep = ','))
# Data Formatting ---------------------------------------------------------
# Create a summed dataset at the transect level while keeping track of plastic and disease presence jointly
SumNoPlastic=aggregate(cbind(Healthy,WS,BBD,BrB,SEB,AtN,GA)~Site_No+Tran+Reef_Name+Year+Sector+Country+Season+Group.Code+Trip.code,data=Plastic[which(Plastic$Plastic==0),],FUN='sum',drop=T,na.action = na.pass,na.rm=T)
SumPlastic=aggregate(cbind(Healthy,WS,BBD,BrB,SEB,AtN,GA,Plastic)~Site_No+Tran+Reef_Name+Year+Sector+Country+Season+Group.Code+Trip.code,data=Plastic[which(Plastic$Plastic==1),],FUN='sum',drop=T,na.action = na.pass,na.rm=T)
colnames(SumPlastic)<- c('Site_No', 'Tran', 'Reef_Name','Year','Sector','Country', 'Season', 'Group.Code','Trip.code','Healthy.P','WS.P','BBD.P','BrB.P','SEB.P','AtN.P','GA.P','Plastic')
SummedPlastic<-merge(SumNoPlastic,SumPlastic,all=T)
TransectLengths$ID=paste(TransectLengths$Site.Name,TransectLengths$Transect)
SummedPlastic$ID=paste(SummedPlastic$Reef_Name,SummedPlastic$Tran)
SummedPlastic$T_length=TransectLengths$LIT.Transect.length_m[match(SummedPlastic$ID,TransectLengths$ID)]
SummedPlastic$Corals.NoPlastic=SummedPlastic$Healthy+SummedPlastic$WS+SummedPlastic$BBD+SummedPlastic$BrB+SummedPlastic$SEB+SummedPlastic$AtN+SummedPlastic$GA
SummedPlastic$Disease.NoPlastic=rowSums(SummedPlastic[,11:16],na.rm=T)
SummedPlastic$Plastic.Corals=rowSums(SummedPlastic[,17:23],na.rm=T)
SummedPlastic$Disease.Plastic=rowSums(SummedPlastic[,18:21],na.rm=T)
SummedPlastic$Sector=factor(SummedPlastic$Sector,levels = c('MYANMAR','KOH TAO','SULAWESI','BALI','PAPUA','PALMS','WH','KEPPELS'))
Plastic$ID<- paste(Plastic$Reef_Name,Plastic$Tran)
Plastic$T_length=TransectLengths$LIT.Transect.length_m[match(Plastic$ID,TransectLengths$ID)]
#Create summary tables to find mean levels of disease at the site level and find the minimum and maximum for the different sectors
summarydata=aggregate(cbind(Disease.NoPlastic/Corals.NoPlastic,Disease.Plastic/Plastic.Corals,Plastic/T_length/2*50)~Sector+Reef_Name,data = SummedPlastic,FUN='mean')
summarydata2=aggregate(cbind(V1,V2)~Sector,data = summarydata,FUN='min')
summarydata3=aggregate(cbind(V1,V2)~Sector,data = summarydata,FUN='max')
# GLMM, Baseline Disease levels for different growth forms, Asia Pacific --------
library(lme4)
Normal.Disease.Growth = glmer(Disease ~ -1 + Growth2+(1|Reef_Name),
data = Plastic[which(Plastic$Plastic==0),],
family = 'binomial',
control = glmerControl(optimizer ="bobyqa"))
# As a sidenote: This code uses a Laplace approximation (nAGQ = 1 - the default) on the integral over the random effects space. "Values greater than 1 produce greater accuracy in the evaluation of the log-likelihood at the expense of speed". The authors of the package suggest values up to 25 (see the documentation).
# PDF, Baseline disease levels by growth form -----------------------------
NormalDisease.by.Growth = data.frame(Tabular = rnorm(100000, mean = -3.1332, sd = .1549),
Massive = rnorm(100000, mean = -3.8153, sd = .1095),
Branching = rnorm(100000, mean = -3.5534, sd = .1103))
NormalDisease.by.Growth$Tabularbt = plogis(NormalDisease.by.Growth$Tabular)
NormalDisease.by.Growth$Massivebt = plogis(NormalDisease.by.Growth$Massive)
NormalDisease.by.Growth$Branchingbt = plogis(NormalDisease.by.Growth$Branching)
NormalDisease.by.Growth = gather(NormalDisease.by.Growth, Growth, Estimate, Tabularbt:Branchingbt)
library(ggplot2)
ggplot(aes(x = Estimate*100), data = NormalDisease.by.Growth) +
geom_density(aes(y = ..scaled.., fill = Growth)) +
scale_x_continuous(limits = c(0, 10)) +
ylab("") +
labs(fill = "Morphology")
quantile0.9 <- REquantile(Normal.Disease.Growth, quantile = 0.9, groupFctr = "Reef_Name")
library(merTools)
sim_rfs_Normal.Disease <- REsim(Normal.Disease.Growth, n.sims = 200)
plotREsim(sim_rfs_Normal.Disease)
quantile0.9 <- REquantile(Normal.Disease.Growth, quantile = 0.9, groupFctr = "Reef_Name")
#which(sim_rfs_Normal.Disease$groupID == quantile0.9)
quantile0.1 <- REquantile(Normal.Disease.Growth, quantile = 0.1, groupFctr = "Reef_Name")
#which(sim_rfs_Normal.Disease$groupID == quantile0.1)
NormalDisease.by.Growth_quantile0.9 = data.frame(
Tabular = rnorm(100000, mean = -3.1332 + 1.495773, sd = .1549),
Massive = rnorm(100000, mean = -3.8153 + 1.495773, sd = .1095),
Branching = rnorm(100000, mean = -3.5534 + 1.495773, sd = .1103))
NormalDisease.by.Growth_quantile0.9$Tabularbt = plogis(NormalDisease.by.Growth_quantile0.9$Tabular)
NormalDisease.by.Growth_quantile0.9$Massivebt = plogis(NormalDisease.by.Growth_quantile0.9$Massive)
NormalDisease.by.Growth_quantile0.9$Branchingbt = plogis(NormalDisease.by.Growth_quantile0.9$Branching)
NormalDisease.by.Growth_quantile0.9 = gather(NormalDisease.by.Growth_quantile0.9, Growth, Estimate, Tabularbt:Branchingbt)
NormalDisease.by.Growth_quantile0.1 = data.frame(
Tabular = rnorm(100000, mean = -3.1332 - 1.689569, sd = .1549),
Massive = rnorm(100000, mean = -3.8153 - 1.689569, sd = .1095),
Branching = rnorm(100000, mean = -3.5534 - 1.689569, sd = .1103))
NormalDisease.by.Growth_quantile0.1$Tabularbt = plogis(NormalDisease.by.Growth_quantile0.1$Tabular)
NormalDisease.by.Growth_quantile0.1$Massivebt = plogis(NormalDisease.by.Growth_quantile0.1$Massive)
NormalDisease.by.Growth_quantile0.1$Branchingbt = plogis(NormalDisease.by.Growth_quantile0.1$Branching)
NormalDisease.by.Growth_quantile0.1 = gather(NormalDisease.by.Growth_quantile0.1, Growth, Estimate, Tabularbt:Branchingbt)
NormalDisease.by.Growth$ID = "average"
NormalDisease.by.Growth_quantile0.1$ID = "0.1quantile"
NormalDisease.by.Growth_quantile0.9$ID = "0.9quantile"
overall <- rbind(NormalDisease.by.Growth, NormalDisease.by.Growth_quantile0.1, NormalDisease.by.Growth_quantile0.9)
ggplot(aes(x = Estimate*100, col = ID), data = overall) +
geom_density(aes(y = ..scaled.., fill = Growth), alpha = 0.9, size = 1.3) +
scale_fill_brewer(palette = "Spectral") +
#scale_fill_manual(values = c("#D55E00", "#009E73", "#0072B2")) +
scale_color_manual(values = c("#000000", "dodgerblue", "darkmagenta")) +
scale_x_continuous(limits = c(0, 10)) +
ylab("") +
labs(fill = "Morphology")
quantile0.9 <- REquantile(Normal.Disease.Growth, quantile = 0.9, groupFctr = "Reef_Name")
#which(sim_rfs_Normal.Disease$groupID == quantile0.9)
quantile0.1 <- REquantile(Normal.Disease.Growth, quantile = 0.1, groupFctr = "Reef_Name")
#which(sim_rfs_Normal.Disease$groupID == quantile0.1)
NormalDisease.by.Growth_quantile0.9 = data.frame(
Tabular = rnorm(100000, mean = -3.1332 + 1.495773, sd = .1549),
Massive = rnorm(100000, mean = -3.8153 + 1.495773, sd = .1095),
Branching = rnorm(100000, mean = -3.5534 + 1.495773, sd = .1103))
NormalDisease.by.Growth_quantile0.9$Tabularbt = plogis(NormalDisease.by.Growth_quantile0.9$Tabular)
NormalDisease.by.Growth_quantile0.9$Massivebt = plogis(NormalDisease.by.Growth_quantile0.9$Massive)
NormalDisease.by.Growth_quantile0.9$Branchingbt = plogis(NormalDisease.by.Growth_quantile0.9$Branching)
NormalDisease.by.Growth_quantile0.9 = gather(NormalDisease.by.Growth_quantile0.9, Growth, Estimate, Tabularbt:Branchingbt)
NormalDisease.by.Growth_quantile0.1 = data.frame(
Tabular = rnorm(100000, mean = -3.1332 - 1.689569, sd = .1549),
Massive = rnorm(100000, mean = -3.8153 - 1.689569, sd = .1095),
Branching = rnorm(100000, mean = -3.5534 - 1.689569, sd = .1103))
NormalDisease.by.Growth_quantile0.1$Tabularbt = plogis(NormalDisease.by.Growth_quantile0.1$Tabular)
NormalDisease.by.Growth_quantile0.1$Massivebt = plogis(NormalDisease.by.Growth_quantile0.1$Massive)
NormalDisease.by.Growth_quantile0.1$Branchingbt = plogis(NormalDisease.by.Growth_quantile0.1$Branching)
NormalDisease.by.Growth_quantile0.1 = gather(NormalDisease.by.Growth_quantile0.1, Growth, Estimate, Tabularbt:Branchingbt)
NormalDisease.by.Growth$ID = "average"
NormalDisease.by.Growth_quantile0.1$ID = "0.1quantile"
NormalDisease.by.Growth_quantile0.9$ID = "0.9quantile"
overall <- rbind(NormalDisease.by.Growth, NormalDisease.by.Growth_quantile0.1, NormalDisease.by.Growth_quantile0.9)
ggplot(aes(x = Estimate*100, col = ID), data = overall) +
geom_density(aes(y = ..scaled.., fill = Growth), alpha = 0.9, size = 1.3) +
scale_fill_brewer(palette = "Spectral") +
#scale_fill_manual(values = c("#D55E00", "#009E73", "#0072B2")) +
scale_color_manual(values = c("#000000", "dodgerblue", "darkmagenta")) +
scale_x_continuous(limits = c(0, 10)) +
ylab("") +
labs(fill = "Morphology", col = "R effect")
quantile0.9 <- REquantile(Normal.Disease.Growth, quantile = 0.9, groupFctr = "Reef_Name")
#which(sim_rfs_Normal.Disease$groupID == quantile0.9)
quantile0.1 <- REquantile(Normal.Disease.Growth, quantile = 0.1, groupFctr = "Reef_Name")
#which(sim_rfs_Normal.Disease$groupID == quantile0.1)
NormalDisease.by.Growth_quantile0.9 = data.frame(
Tabular = rnorm(100000, mean = -3.1332 + 1.495773, sd = .1549),
Massive = rnorm(100000, mean = -3.8153 + 1.495773, sd = .1095),
Branching = rnorm(100000, mean = -3.5534 + 1.495773, sd = .1103))
NormalDisease.by.Growth_quantile0.9$Tabularbt = plogis(NormalDisease.by.Growth_quantile0.9$Tabular)
NormalDisease.by.Growth_quantile0.9$Massivebt = plogis(NormalDisease.by.Growth_quantile0.9$Massive)
NormalDisease.by.Growth_quantile0.9$Branchingbt = plogis(NormalDisease.by.Growth_quantile0.9$Branching)
NormalDisease.by.Growth_quantile0.9 = gather(NormalDisease.by.Growth_quantile0.9, Growth, Estimate, Tabularbt:Branchingbt)
NormalDisease.by.Growth_quantile0.1 = data.frame(
Tabular = rnorm(100000, mean = -3.1332 - 1.689569, sd = .1549),
Massive = rnorm(100000, mean = -3.8153 - 1.689569, sd = .1095),
Branching = rnorm(100000, mean = -3.5534 - 1.689569, sd = .1103))
NormalDisease.by.Growth_quantile0.1$Tabularbt = plogis(NormalDisease.by.Growth_quantile0.1$Tabular)
NormalDisease.by.Growth_quantile0.1$Massivebt = plogis(NormalDisease.by.Growth_quantile0.1$Massive)
NormalDisease.by.Growth_quantile0.1$Branchingbt = plogis(NormalDisease.by.Growth_quantile0.1$Branching)
NormalDisease.by.Growth_quantile0.1 = gather(NormalDisease.by.Growth_quantile0.1, Growth, Estimate, Tabularbt:Branchingbt)
NormalDisease.by.Growth$ID = "average"
NormalDisease.by.Growth_quantile0.1$ID = "0.1quantile"
NormalDisease.by.Growth_quantile0.9$ID = "0.9quantile"
overall <- rbind(NormalDisease.by.Growth, NormalDisease.by.Growth_quantile0.1, NormalDisease.by.Growth_quantile0.9)
ggplot(aes(x = Estimate*100, col = ID), data = overall) +
geom_density(aes(y = ..scaled.., fill = Growth), alpha = 0.9, size = 1.3) +
scale_fill_brewer(palette = "Spectral") +
#scale_fill_manual(values = c("#D55E00", "#009E73", "#0072B2")) +
scale_color_manual(values = c("#000000", "dodgerblue", "darkmagenta")) +
scale_x_continuous(limits = c(0, 10)) +
ylab("") +
labs(col = "R effect", fill = "Morphology")
blogdown:::serve_site()
50/110
50/0.2
70/0.2
350-20
20/350
0.2*350
0.9*0.7
0.1*0.8
10/71
0.1+0.2
0.1*0.2
0.9*0.7
0.63+0.02
0.02/0.65
0.8*0.7
0.02/0.57
0.2*0.3
0.7*0.7
0.06/0.55
0.6*0.7
0.3*0.2
0.06/0.48
0.06/0.45
0.06/0.40
0.06/0.35
0.06/0.30
0.03/0.45
0.03/0.50
0.06/0.50
0.06/0.52
0.06/0.51
0.05/0.50
0.44/0.7
0.06/0.48
0.06/(0.7*0.6)+0.06
0.06/((0.7*0.6)+0.06)
0.07/((0.7*0.6)+0.07)
0.08/((0.7*0.6)+0.08)
0.4*0.2
0.8*0.4
0.08/0.6
1-0.13
0.6*0.2
0.12/0.6
blogdown:::serve_site()
install.packages("bookdown")
install.packages("blogdown")
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
pl <- function(n, p, a, b) {
#clr <- rainbow(15)[ceiling(runif(2, 4, 15))]
clr <- rainbow(15)[ceiling(c(10.68978, 14.24863))]
lambda <- n * p
mx <- max(dbinom(a:b, n, p))
plot(
c(a:b, a:b),
c(dbinom(a:b, n, p), dpois(a:b, lambda)),
type = "n",
main = paste("Poisson Approx. to Binomial, n=", n, ", p=", p, ", lambda=", lambda),
ylab = "Probability",
xlab = "x")
points((a:b) - .15,
dbinom(a:b, n, p),
type = "h",
col = clr[1],
lwd = 10)
points((a:b) + .15,
dpois(a:b, lambda),
type = "h",
col = clr[2],
lwd = 10)
legend(b - 3.5, mx, legend = c("Binomial(x,n,p)", "Poisson(x,lambda)"), fill = clr, bg = "white")
}
pl(10,.3,0,10)
pl(100,.03,0,10)
20*0.05
pl(20, 0.05,0, 1)
pl(20, 0.05, 1)
pl(20, 0.05, 0, 10)
pl(10, 0.05, 0, 10)
pl(20, 0.05, 0, 10)
pl(10, 0.1, 0, 10)
pl(10, 0.3, 0, 10)
100*0.01
pl(100, 0.01, 0, 10)
pl(100, 0.03, 0, 10)
pl(1000, 0.003, 0, 10)
pl <- function(n, p, a, b) {
clr <- rainbow(15)[ceiling(c(10.68978, 14.24863))]
lambda <- n * p
mx <- max(dbinom(a:b, n, p))
plot(
c(a:b, a:b),
c(dbinom(a:b, n, p), dpois(a:b, lambda)),
type = "n",
main = expression(paste("Poisson Approx. to Binomial, n=", n, ", p=", p, ", lambda=", lambda)),
ylab = "Probability",
xlab = "x")
points((a:b) - .15,
dbinom(a:b, n, p),
type = "h",
col = clr[1],
lwd = 10)
points((a:b) + .15,
dpois(a:b, lambda),
type = "h",
col = clr[2],
lwd = 10)
legend(b - 3.5, mx, legend = c("Binomial(x,n,p)", "Poisson(x,lambda)"), fill = clr, bg = "white")
}
pl(20, 0.05, 0, 10)
pl(10, 0.3, 0, 10)
# plots the pmfs of Binomial and Poisson
pl <- function(n, p, a, b) {
clr <- rainbow(15)[ceiling(c(10.68978, 14.24863))]
lambda <- n * p
mx <- max(dbinom(a:b, n, p))
plot(
c(a:b, a:b),
c(dbinom(a:b, n, p), dpois(a:b, lambda)),
type = "n",
main = paste("Poisson Approx. to Binomial, n=", n, ", p=", p, ", lambda=", lambda),
ylab = "Probability",
xlab = "x")
points((a:b) - .15,
dbinom(a:b, n, p),
type = "h",
col = clr[1],
lwd = 10)
points((a:b) + .15,
dpois(a:b, lambda),
type = "h",
col = clr[2],
lwd = 10)
legend(b - 3.5, mx, legend = c("Binomial(x,n,p)", "Poisson(x,lambda)"), fill = clr, bg = "white")
}
pl(20, 0.05, 0, 10)
pl(10, 0.3, 0, 10)
10*0.5
20*0.05
10*0.1
pl(10, 0.1, 0, 10)
pl(10, 0.3, 0, 10)
blogdown:::serve_site()
install.packages("zoo")
blogdown:::serve_site()
install.packages("lsmeans")
blogdown:::serve_site()
install.packages("MuMIn")
install.packages("reshape")
blogdown:::serve_site()
install.packages("lme4")
blogdown:::serve_site()
install.packages("merTools")
blogdown:::serve_site()
install.packages("kableExtra")
library(pROC)
library(tibble)
sim_data <- function(n_positives, n_negatives){# simulates dataset as described above and calculates the ROC
# input arguments: the number of positives and negatives
y <- c(rep(0, n_negatives), rep(1, n_positives)) # binary response
x <- c(rnorm(n_negatives), rnorm(n_positives, mean = 1.5)) # simulate covariate
df <- data.frame(y = y, x = x)
ER <- mean(df$y) # event rate
Dp <- dnorm(df$x, mean = 1.5, sd = 1) # covariate density for positives
Dn <- dnorm(df$x, mean = 0, sd = 1) # covariate density for negatives
true_risk <- (ER * Dp)/((ER * Dp) + ((1 - ER) * Dn))  # true risks
roc_sim <- roc(df$y, true_risk) # calculates ROC curve
df <- tibble(FPR = 1 - roc_sim$specificities, # false positive rate
TPR = roc_sim$sensitivities) # true positive rate
return(df)
}
blogdown:::serve_site()
n.sims <- 100 # times simulation is repeated
n.positives <- 1000 # number of positives
n.negatives <- 4000 # number of negatives
library(purrr)
library(dplyr)
# scenario 1
multiplier <- 1 # the multiplier adjusts the number of the negatives - so I can have the event rate I want
sims1 <- n.sims %>%
rerun(sim_data(n.positives, n.negatives * multiplier)) %>%
map(~ data.frame(.x)) %>%
plyr::ldply(., data.frame, .id = "Name") %>%
mutate(sims = rep(1:n.sims, each = sum(n.positives + n.negatives * multiplier) + 1),
Scenario = "Scenario 1")
# scenario 2
multiplier <- 10
sims2 <- n.sims %>%
rerun(sim_data(n.positives, n.negatives * multiplier)) %>%
map(~ data.frame(.x)) %>%
plyr::ldply(., data.frame, .id = "Name") %>%
mutate(sims = rep(1:n.sims, each = sum(n.positives + n.negatives * multiplier) + 1),
Scenario = "Scenario 2")
df_final <- rbind(sims1, sims2)
library(ggplot2)
ggplot(df_final) +
geom_line(aes(x = FPR, y = TPR, group = sims, col = Scenario), alpha = 0.8) +
facet_grid(~ Scenario)
blogdown:::serve_site()
install.packages("rmarkdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
library(blogdown)
blogdown:::serve_site()
install.packages("blogdown")
blogdown:::serve_site()
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
blogdown:::serve_site()
blogdown::install_hugo().
blogdown::install_hugo()
blogdown:::serve_site()
blogdown:::serve_site()
??Rprofile
?Rprofile
blogdown:::serve_site()
blogdown::build_site()
blogdown::server_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::server_site()
blogdown::serve_site()
blogdown::stop_server()
bookdown:::serve_book()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown::hugo_build()
devtools::install_github('rstudio/blogdown')
blogdown:::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown:::serve_site()
file.edit('~/.Rprofile')
blogdown:::serve_site()
blogdown::hugo_build()
blogdown:::blogdown_site
blogdown:::serve_site()
install_theme(theme = "gcushen/hugo-academic", update_config=FALSE, force = TRUE)
?install_theme
library(blogdown)
install_theme(theme = "gcushen/hugo-academic", update_config=FALSE, force = TRUE)
blogdown:::serve_site()
blogdown::stop_server()
blogdown::hugo_build()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
?blogdown::hugo_version()
blogdown::hugo_version()
install_theme(theme = "gcushen/hugo-academic", update_config=FALSE, force = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::find_hugo()
?install_hugo
blogdown::install_hugo(version="0.26", force=TRUE)
blogdown:::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::build_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::insert_image_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::hugo_version()
blogdown:::serve_site()
blogdown::install_theme(theme = "gcushen/hugo-academic", update_config=FALSE, force = TRUE)
blogdown::new_site(theme = 'lxndrblz/anatole')
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::new_site(theme = 'yihui/hugo-lithium')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
