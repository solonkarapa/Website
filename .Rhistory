csc_cox <- CSC(Hist(time = Time, event = BirdPredated) ~ Treatment, data = data_compete)
# cause 1 = bird death
coef(csc_cox$models[[1]])
# cause 2 = non-bird death
coef(csc_cox$models[[2]])
library(survival)
# Cause-specific hazard for predator death
cox1 <- coxph(Surv(Time, BirdPredated == 1) ~ Treatment, data=data_compete, x = TRUE)
pchisq(summary(cox1)$logtest[1], df = summary(cox1)$logtest[2], lower.tail = F)
# Cause-specific hazard for non-predator death
cox2 <- coxph(Surv(Time, BirdPredated == 2) ~ Treatment, data=data_compete, x = TRUE)
pchisq(summary(cox2)$logtest[1], df = summary(cox2)$logtest[2], lower.tail = F)
Treatment <- model.matrix(~ data_compete[, "Treatment"])[,-1]
cov_mat <- Treatment
#
library(cmprsk)
# subdistribution hazard predator death
crr_1 <- crr(data_compete$Time, fstatus = data_compete$BirdPredated, cov1 = cov_mat, failcode = 1)
summary(crr_1)
pchisq(as.numeric(null_id), df = 1, lower.tail = F)
pchisq(summary(crr_1)$logtest[1], df = summary(crr_1)$logtest[2], lower.tail = F)
# subdistribution hazard non-predator death
crr_2 <- crr(data_compete$Time, fstatus = data_compete$BirdPredated, cov1 = cov_mat, failcode = 2)
summary(crr_2)
# load packages
library(dplyr)
library(ggplot2)
#####
processing__irid_output <- function(fit, model_name){
res <- as.data.frame(summary(fit)$conf.int[,c(1, 3, 4)])
rownames(res) <- c("Stat", "Gre" , "Pur", "Blu", "Bla")
colnames(res) <- c("HR", "2.5%", "97.5%")
res$Model <- model_name
df_prelim <- tibble::rownames_to_column(res, "Treatment")
df <- df_prelim %>%
add_row(Treatment = c("Irid"), HR = 1, `2.5%` = 1, `97.5%` = 1, Model = model_name) %>%
mutate(Treatment = factor(Treatment, levels = c("Irid", "Stat", "Gre" , "Pur", "Blu", "Bla")))
return(df)
}
library(purrr)
models <- list(cox1, cox2, crr_1, crr_2)
models_names <- list("cause-specific birds", "cause-specific other", "subdistribution birds", "subdistribution other")
df_output <- map2_df(models, models_names, processing__irid_output)
library(ggsci)
width_dodge <- 0.4
ggplot(df_output) +
geom_point(aes(y = HR, x = Treatment, col = Model), size = 2, position = position_dodge(width_dodge)) +
geom_errorbar(aes(y = HR, x = Treatment, ymin = `2.5%`, ymax = `97.5%` , col = Model),
width = .3, position=position_dodge(width_dodge), size = 1) +
geom_hline(yintercept = 1, linetype = "dashed") +
scale_color_startrek() +
#coord_cartesian(y = c(0.5, 4)) +
theme_bw(14)
library(purrr)
models <- list(cox1, cox2, crr_1, crr_2)
models_names <- list("cause-specific birds", "cause-specific non-birds", "subdistribution birds", "subdistribution non-birds")
df_output <- map2_df(models, models_names, processing__irid_output)
library(ggsci)
width_dodge <- 0.4
ggplot(df_output) +
geom_point(aes(y = HR, x = Treatment, col = Model), size = 2, position = position_dodge(width_dodge)) +
geom_errorbar(aes(y = HR, x = Treatment, ymin = `2.5%`, ymax = `97.5%` , col = Model),
width = .3, position=position_dodge(width_dodge), size = 1) +
geom_hline(yintercept = 1, linetype = "dashed") +
scale_color_startrek() +
#coord_cartesian(y = c(0.5, 4)) +
theme_bw(14)
library(cmprsk)
Treatment <- model.matrix(~ data_compete[, "Treatment"])[,-1]
cov_mat <- Treatment
# subdistribution hazard bird death
crr1 <- crr(data_compete$Time, fstatus = data_compete$BirdPredated, cov1 = cov_mat, failcode = 1)
# subdistribution hazard non-bird death
crr2 <- crr(data_compete$Time, fstatus = data_compete$BirdPredated, cov1 = cov_mat, failcode = 2)
##### auxiliary function
processing__irid_output <- function(fit, model_name){
res <- as.data.frame(summary(fit)$conf.int[,c(1, 3, 4)])
rownames(res) <- c("Stat", "Gre" , "Pur", "Blu", "Bla")
colnames(res) <- c("HR", "2.5%", "97.5%")
res$Model <- model_name
df_prelim <- tibble::rownames_to_column(res, "Treatment")
df <- df_prelim %>%
add_row(Treatment = c("Irid"), HR = 1, `2.5%` = 1, `97.5%` = 1, Model = model_name) %>%
mutate(Treatment = factor(Treatment, levels = c("Irid", "Stat", "Gre" , "Pur", "Blu", "Bla")))
return(df)
}
library(cmprsk)
Treatment <- model.matrix(~ data_compete[, "Treatment"])[,-1]
cov_mat <- Treatment
# subdistribution hazard bird death
crr1 <- crr(data_compete$Time, fstatus = data_compete$BirdPredated, cov1 = cov_mat, failcode = 1)
# subdistribution hazard non-bird death
crr2 <- crr(data_compete$Time, fstatus = data_compete$BirdPredated, cov1 = cov_mat, failcode = 2)
library(purrr)
models <- list(cox1, cox2, crr1, crr2)
models_names <- list("cause-specific birds", "cause-specific non-birds", "subdistribution birds", "subdistribution non-birds")
df_output <- map2_df(models, models_names, processing__irid_output)
library(ggsci)
width_dodge <- 0.4
ggplot(df_output) +
geom_point(aes(y = HR, x = Treatment, col = Model), size = 2, position = position_dodge(width_dodge)) +
geom_errorbar(aes(y = HR, x = Treatment, ymin = `2.5%`, ymax = `97.5%` , col = Model),
width = .3, position=position_dodge(width_dodge), size = 1) +
geom_hline(yintercept = 1, linetype = "dashed") +
scale_color_startrek() +
#coord_cartesian(y = c(0.5, 4)) +
theme_bw(14)
blogdown:::preview_site()
blogdown:::preview_site()
# load data
main_path <- "/Users/work/Desktop/Website/content/post/iridescence/data"
Experiment1_data <- read.delim(paste0(main_path, "/Kjernsmo_et_al_Experiment1_data.txt"))
data <- Experiment1_data %>%
mutate(Treatment = factor(Treatment, levels = c("Irid", "Stat", "Gre" , "Pur", "Blu", "Bla")))
# load packages
library(dplyr)
library(ggplot2)
# load data
main_path <- "/Users/work/Desktop/Website/content/post/iridescence/data"
Experiment1_data <- read.delim(paste0(main_path, "/Kjernsmo_et_al_Experiment1_data.txt"))
data <- Experiment1_data %>%
mutate(Treatment = factor(Treatment, levels = c("Irid", "Stat", "Gre" , "Pur", "Blu", "Bla")))
# data transformation for competing risks
# data is the loaded data-frame
data_compete <- data %>%
mutate(BirdPredated = case_when(
(Notes == "SPIDER" | Notes == "ANTS" | Notes == "SLUG" | Notes == "WASP") ~ 2,
TRUE ~ as.numeric(BirdPredated)))
library(survival)
# Cause-specific hazard for bird death
cox1 <- coxph(Surv(Time, BirdPredated == 1) ~ Treatment, data = data_compete, x = TRUE)
# Cause-specific hazard for non-bird death
cox2 <- coxph(Surv(Time, BirdPredated == 2) ~ Treatment, data = data_compete, x = TRUE)
summary(cox1)
# necessary pre-processing
Treatment <- model.matrix(~ data_compete[, "Treatment"])[,-1]
cov_mat <- Treatment
# subdistribution hazard bird death
crr1 <- crr(data_compete$Time, fstatus = data_compete$BirdPredated, cov1 = cov_mat, failcode = 1)
library(cmprsk)
# necessary pre-processing
Treatment <- model.matrix(~ data_compete[, "Treatment"])[,-1]
cov_mat <- Treatment
# subdistribution hazard bird death
crr1 <- crr(data_compete$Time, fstatus = data_compete$BirdPredated, cov1 = cov_mat, failcode = 1)
# subdistribution hazard non-bird death
crr2 <- crr(data_compete$Time, fstatus = data_compete$BirdPredated, cov1 = cov_mat, failcode = 2)
ccr1
crr1
epx(0.3702)
exp(0.3702)
summary(crr1)
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::serve_site()
install.packages("blogdown")
blogdown:::serve_site()
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::preview_site()
knitr::include_graphics("keyboard_1280.png")
knitr::include_graphics("/keyboard_1280.png")
getwd()
knitr::include_graphics("/content/post/qwerty/keyboard_1280.png")
knitr::include_graphics("~/content/post/qwerty/keyboard_1280.png")
getwd()
knitr::include_graphics("/Users/work/Desktop/Website/content/post/qwerty/keyboard_1280.png")
knitr::include_graphics("/Users/work/Desktop/Website/content/post/qwerty/keyboard_1280.png")
knitr::include_graphics("/Users/work/Desktop/Website/content/post/qwerty/keyboard_1280.png")
library(purrr)
N <- 26
K <- seq(6, N - 7, by = 1)
prbs <- map_dbl(K, ~ dhyper(x = 7, m = .x, n = N - .x, k = 7))
df <- data.frame(m, prbs)
library(purrr)
N <- 26
K <- seq(6, N - 7, by = 1)
prbs <- map_dbl(K, ~ dhyper(x = 7, m = .x, n = N - .x, k = 7))
df <- data.frame(K, prbs)
# prb of exact "qwerty" word sampled
pr_exact <- (1/26)*(1/25)*(1/24)*(1/23)*(1/22)**(1/21)*(1/20)*(1/19)
ggplot(df) +
geom_point(aes(x = m, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(m == "10"), aes(x = m, y = prbs), col = 'red') +
geom_hline(yintercept = pr_exact, linetype = "dashed") +
scale_x_continuous(breaks = m, labels = m) +
theme_bw()
# prb of exact "qwerty" word sampled
pr_exact <- (1/26)*(1/25)*(1/24)*(1/23)*(1/22)**(1/21)*(1/20)*(1/19)
library(ggplot2)
ggplot(df) +
geom_point(aes(x = m, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(m == "10"), aes(x = m, y = prbs), col = 'red') +
geom_hline(yintercept = pr_exact, linetype = "dashed") +
scale_x_continuous(breaks = m, labels = m) +
theme_bw()
# prb of exact "qwerty" word sampled
pr_exact <- (1/26)*(1/25)*(1/24)*(1/23)*(1/22)**(1/21)*(1/20)*(1/19)
library(ggplot2)
ggplot(df) +
geom_point(aes(x = m, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(K == "10"), aes(x = m, y = prbs), col = 'red') +
geom_hline(yintercept = pr_exact, linetype = "dashed") +
scale_x_continuous(breaks = m, labels = m) +
theme_bw()
str(df)
ggplot(df) +
geom_point(aes(x = K, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(K == "10"), aes(x = m, y = prbs), col = 'red') +
geom_hline(yintercept = pr_exact, linetype = "dashed") +
scale_x_continuous(breaks = m, labels = m) +
theme_bw()
# prb of exact "qwerty" word sampled
pr_exact <- (1/26)*(1/25)*(1/24)*(1/23)*(1/22)**(1/21)*(1/20)*(1/19)
library(ggplot2)
ggplot(df) +
geom_point(aes(x = K, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(K == "10"), aes(x = K, y = prbs), col = 'red') +
geom_hline(yintercept = pr_exact, linetype = "dashed") +
scale_x_continuous(breaks = K, labels = K) +
theme_bw()
class(df)
ggplot(df) +
geom_point(aes(x = K, y = prbs))
ggplot(df) +
geom_point(aes(x = K, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(K == "10"), aes(x = K, y = prbs), col = 'red')
ggplot(df) +
geom_point(aes(x = K, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(K == "10"), aes(x = K, y = prbs), col = 'red') +
geom_hline(yintercept = pr_exact, linetype = "dashed") +
scale_x_continuous(breaks = K, labels = K) +
theme_bw()
library(dplyr)
ggplot(df) +
geom_point(aes(x = K, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(K == "10"), aes(x = K, y = prbs), col = 'red') +
geom_hline(yintercept = pr_exact, linetype = "dashed") +
scale_x_continuous(breaks = K, labels = K) +
theme_bw()
library(ggplot2)
library(dplyr)
# prb of exact "qwerty" word sampled - see later
pr_exact <- (1/26)*(1/25)*(1/24)*(1/23)*(1/22)**(1/21)*(1/20)*(1/19)
ggplot(df) +
geom_point(aes(x = K, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(K == "10"), aes(x = K, y = prbs), col = 'red') +
geom_hline(yintercept = pr_exact, linetype = "dashed") +
scale_x_continuous(breaks = K, labels = K) +
theme_bw()
knitr::include_graphics("/Users/work/Desktop/Website/content/post/qwerty/keyboard_1280.png")
knitr::include_graphics("/Users/work/Desktop/Website/content/post/qwerty/keyboard_1280.png")
knit_with_parameters("~/Desktop/Website/content/post/qwerty/qwerty.Rmd")
unlink("content/post/qwerty/qwerty_cache", recursive = TRUE)
library(grid)
img <- readPNG("/Users/work/Desktop/Website/content/post/qwerty/keyboard_1280.png")
library(grid)
img <- readPNG("/Users/work/Desktop/Website/content/post/qwerty/keyboard_1280.png")
?readPNG
??readPNG
?grid.raster
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("/Users/work/Desktop/Website/content/post/qwerty/keyboard_1280.png")
blogdown:::serve_site()
sessionInfo()
blogdown:::serve_site()
ggplot(df) +
geom_point(aes(x = m, y = log(prbs))) +
labs(y = "Log(Probability)", x = "Top row balls") +
geom_point(data = df %>% filter(m == "10"), aes(x = m, y = log(prbs)), col = 'red') +
geom_hline(yintercept = log(pr_exact), linetype = "dashed") +
scale_x_continuous(breaks = m, labels = m) +
theme_bw()
m <- seq(6, 26 - 7, by = 1)
dhyper(x = 7, m = 10, n = 26 - 10, k = 7, log = FALSE)
dhyper(x = 4, m = 5, n = 45, k = 10, log = FALSE)
prbs <- map_dbl(m, ~ dhyper(x = 7, m = .x, n = 26 - .x, k = 7))
library(purrr)
X <- c(10, 9, 8, 7)
map(X, calc_prbs, Z = Z, n = n)
# hypergeomtric
m <- seq(6, 26 - 7, by = 1)
dhyper(x = 7, m = 10, n = 26 - 10, k = 7, log = FALSE)
dhyper(x = 4, m = 5, n = 45, k = 10, log = FALSE)
prbs <- map_dbl(m, ~ dhyper(x = 7, m = .x, n = 26 - .x, k = 7))
df <- data.frame(m, prbs)
# prb of exact "qwerty" word sampled
pr_exact <- (1/26)*(1/25)*(1/24)*(1/23)*(1/22)**(1/21)*(1/20)*(1/19)
ggplot(df) +
geom_point(aes(x = m, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(m == "10"), aes(x = m, y = prbs), col = 'red') +
geom_hline(yintercept = pr_exact, linetype = "dashed") +
scale_x_continuous(breaks = m, labels = m) +
theme_bw()
ggplot(df) +
geom_point(aes(x = m, y = log(prbs))) +
labs(y = "Log(Probability)", x = "Top row balls") +
geom_point(data = df %>% filter(m == "10"), aes(x = m, y = log(prbs)), col = 'red') +
geom_hline(yintercept = log(pr_exact), linetype = "dashed") +
scale_x_continuous(breaks = m, labels = m) +
theme_bw()
library(ggplot2)
ggplot(df) +
geom_point(aes(x = m, y = log(prbs))) +
labs(y = "Log(Probability)", x = "Top row balls") +
geom_point(data = df %>% filter(m == "10"), aes(x = m, y = log(prbs)), col = 'red') +
geom_hline(yintercept = log(pr_exact), linetype = "dashed") +
scale_x_continuous(breaks = m, labels = m) +
theme_bw()
str(df)
ggplot(df) +
geom_point(aes(x = m, y = prbs)) +
labs(y = "Probability", x = "K") +
geom_point(data = df %>% filter(m == "10"), aes(x = m, y = prbs), col = 'red') +
geom_hline(yintercept = pr_exact, linetype = "dashed") +
scale_x_continuous(breaks = m, labels = m) +
theme_bw()
ggplot(df) +
geom_point(aes(x = m, y = log(prbs))) +
labs(y = "Log(Probability)", x = "Top row balls")
library(dplyr)
ggplot(df) +
geom_point(aes(x = m, y = log(prbs))) +
labs(y = "Log(Probability)", x = "Top row balls") +
geom_point(data = df %>% filter(m == "10"), aes(x = m, y = log(prbs)), col = 'red') +
geom_hline(yintercept = log(pr_exact), linetype = "dashed") +
scale_x_continuous(breaks = m, labels = m) +
theme_bw()
knitr::include_graphics("/Users/work/Desktop/Website/content/post/qwerty/keyboard_1280.png")
blogdown:::serve_site()
blogdown:::serve_site()
library(purrr)
N <- 26
K <- seq(6, N - 7, by = 1)
prbs <- map_dbl(K, ~ dhyper(x = 7, m = .x, n = N - .x, k = 7))
df <- data.frame(K, prbs)
str(df)
df %>% filter(K == 16)
df %>% filter(K = 16)
df
df
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# helper functions - each one calculates one of the steps 2-5
f2 <- function(x) (x + 9) * 2 # calculates step 2
f3 <- function(x) (x * 6) + 12 # calculates step 3
f4 <- function(x) x - 60 # calculates step 4
f5 <- function(x) (x / 12) - 4 # calculates step 5
magic_trick <- function(x, rep = 0){
# x: a whole number from 1 to 50
# rep: the step 2-5 to be repeated twice. If rep = 0 or 1. - no repetition
if(rep == 2){
f <- f5(f4(f3(f2(f2(x)))))
} else if(rep == 3){
f <- f5(f4(f3(f3(f2(x)))))
} else if(rep == 4){
f <- f5(f4(f4(f3(f2(x)))))
} else if(rep == 5) {
f <- f5(f5(f4(f3(f2(x)))))
}
else{
f <- f5(f4(f3(f2(x)))) - x
}
return(f)
}
x_values <- seq(1, 50, by = 1) # step 1: whole number from 1 to 50.
repeated <- c(0, 2, 3, 4, 5) # step to repeat. 0 corresponds to the original puzzle
vals <- expand.grid(x_values, repeated)
library(purrr)
library(ggplot2)
res <- map2_dbl(vals$Var1, vals$Var2, magic_trick_original)
x_values <- seq(1, 50, by = 1) # step 1: whole number from 1 to 50.
repeated <- c(0, 2, 3, 4, 5) # step to repeat. 0 corresponds to the original puzzle
vals <- expand.grid(x_values, repeated)
library(purrr)
library(ggplot2)
res <- map2_dbl(vals$Var1, vals$Var2, magic_trick)
df <- data.frame(x = rep(x_values, 5), repeated = rep(repeated, each = 50), res = res) %>%
mutate(repeated = paste0("step ", repeated, " repeated")) %>%
ggplot(.) +
geom_point(aes(x = x, y = res)) +
facet_wrap(. ~ repeated, scales = "free") +
geom_hline(yintercept = 1, linetype = "dashed", lwd = 1.7, col = "#009E73") +
labs(y = "Result at step 7") +
theme_linedraw(12) +
theme(strip.background = element_rect(fill = "white")) +
theme(strip.text.x = element_text(color = "black"))
x_values <- seq(1, 50, by = 1) # step 1: whole number from 1 to 50.
repeated <- c(0, 2, 3, 4, 5) # step to repeat. 0 corresponds to the original puzzle
vals <- expand.grid(x_values, repeated)
library(purrr)
library(dplyr)
library(ggplot2)
res <- map2_dbl(vals$Var1, vals$Var2, magic_trick)
df <- data.frame(x = rep(x_values, 5), repeated = rep(repeated, each = 50), res = res) %>%
mutate(repeated = paste0("step ", repeated, " repeated")) %>%
ggplot(.) +
geom_point(aes(x = x, y = res)) +
facet_wrap(. ~ repeated, scales = "free") +
geom_hline(yintercept = 1, linetype = "dashed", lwd = 1.7, col = "#009E73") +
labs(y = "Result at step 7") +
theme_linedraw(12) +
theme(strip.background = element_rect(fill = "white")) +
theme(strip.text.x = element_text(color = "black"))
x_values <- seq(1, 50, by = 1) # step 1: whole number from 1 to 50.
repeated <- c(0, 2, 3, 4, 5) # step to repeat. 0 corresponds to the original puzzle
vals <- expand.grid(x_values, repeated)
library(purrr)
library(dplyr)
library(ggplot2)
res <- map2_dbl(vals$Var1, vals$Var2, magic_trick)
df <- data.frame(x = rep(x_values, 5), repeated = rep(repeated, each = 50), res = res) %>%
mutate(repeated = paste0("step ", repeated, " repeated")) %>%
ggplot(.) +
geom_point(aes(x = x, y = res)) +
facet_wrap(. ~ repeated, scales = "free") +
geom_hline(yintercept = 1, linetype = "dashed", linewidth = 1.7, col = "#009E73") +
labs(y = "Result at step 7") +
theme_linedraw(12) +
theme(strip.background = element_rect(fill = "white")) +
theme(strip.text.x = element_text(color = "black"))
ggplot(df) +
geom_point(aes(x = x, y = res)) +
facet_wrap(. ~ repeated, scales = "free") +
geom_hline(yintercept = 1, linetype = "dashed", linewidth = 1.7, col = "#009E73") +
labs(y = "Result at step 7") +
theme_linedraw(12) +
theme(strip.background = element_rect(fill = "white")) +
theme(strip.text.x = element_text(color = "black"))
df <- data.frame(x = rep(x_values, 5), repeated = rep(repeated, each = 50), res = res) %>%
mutate(repeated = paste0("step ", repeated, " repeated"))
ggplot(df) +
geom_point(aes(x = x, y = res)) +
facet_wrap(. ~ repeated, scales = "free") +
geom_hline(yintercept = 1, linetype = "dashed", linewidth = 1.7, col = "#009E73") +
labs(y = "Result at step 7") +
theme_linedraw(12) +
theme(strip.background = element_rect(fill = "white")) +
theme(strip.text.x = element_text(color = "black"))
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# helper functions - each one calculates one of the steps 2-5
f2 <- function(x) (x + 9) * 2 # calculates step 2
f3 <- function(x) (x * 6) + 12 # calculates step 3
f4 <- function(x) x - 60 # calculates step 4
f5 <- function(x) (x / 12) - 4 # calculates step 5
magic_trick <- function(x, rep = 0){
# x: a whole number from 1 to 50
# rep: the step 2-5 to be repeated twice. If rep = 0 or 1. - no repetition
if(rep == 2){
f <- f5(f4(f3(f2(f2(x)))))
} else if(rep == 3){
f <- f5(f4(f3(f3(f2(x)))))
} else if(rep == 4){
f <- f5(f4(f4(f3(f2(x)))))
} else if(rep == 5) {
f <- f5(f5(f4(f3(f2(x)))))
}
else{
f <- f5(f4(f3(f2(x)))) - x
}
return(f)
}
x_values <- seq(1, 50, by = 1) # step 1: whole number from 1 to 50.
repeated <- c(0, 2, 3, 4, 5) # step to repeat. 0 corresponds to the original puzzle
vals <- expand.grid(x_values, repeated)
library(purrr)
library(dplyr)
library(ggplot2)
res <- map2_dbl(vals$Var1, vals$Var2, magic_trick)
df <- data.frame(x = rep(x_values, 5), repeated = rep(repeated, each = 50), res = res) %>%
mutate(repeated = paste0("step ", repeated, " repeated"))
ggplot(df) +
geom_point(aes(x = x, y = res)) +
facet_wrap(. ~ repeated, scales = "free") +
geom_hline(yintercept = 1, linetype = "dashed", linewidth = 1.7, col = "#009E73") +
labs(y = "Result at step 7") +
theme_linedraw(12) +
theme(strip.background = element_rect(fill = "white")) +
theme(strip.text.x = element_text(color = "black"))
blogdown:::serve_site()
