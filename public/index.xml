<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Solon Karapanagiotis 2018</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0100</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Plastic waste and disease on coral reefs - Another misinterpretation of a statistical model</title>
      <link>/post/reefs/plastic-waste-and-disease-on-coral-reefs/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/reefs/plastic-waste-and-disease-on-coral-reefs/</guid>
      <description>&lt;p&gt;Recently, I came across this very interesting article published in &lt;a href=&#34;http://science.sciencemag.org/content/359/6374/460.long&#34;&gt;Science&lt;/a&gt; about how plastic waste is associated with disease on coral reefs &lt;span class=&#34;citation&#34;&gt;(J. B. Lamb et al. &lt;a href=&#34;#ref-lamb2018plastic&#34;&gt;2018&lt;/a&gt;)&lt;/span&gt;. The main conclusions are&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;contact with plastic increases the probability of disease,&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;the morphological structure of the reefs is associated with the probability of being in contact with plastic with more complex ones being more likely to be affected by plastic,&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;the plastic levels correspond to estimates of mismanaged plastic waste into the ocean.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overall, this study provides evidence how plastic waste negatively affects coral reefs, making them more susceptible to diseases. The authors made available both the datasets they used and the code &lt;span class=&#34;citation&#34;&gt;(both can be downloaded from J. Lamb et al. &lt;a href=&#34;#ref-dryad_mp480&#34;&gt;2018&lt;/a&gt;)&lt;/span&gt; so it’s an excellent example of reproducible research. The methods section is straightforward to follow (see &lt;a href=&#34;http://science.sciencemag.org/content/suppl/2018/01/24/359.6374.460.DC1?_ga=2.198123375.1394041835.1523546630-1357771364.1523546630&#34;&gt;Supplementary Materials&lt;/a&gt;). My comment is about the 2nd point above, and more specifically the methodology that led to this conclusion (see Fig. 4 of the article). The issue is the authors interpret the models they are using wrongly. Let me explain …&lt;/p&gt;
&lt;p&gt;Their model is a simple generalised linear mixed model (GLMM) - binomial error distribution and logistic link. The outcome is the disease prevalence (binary) among coral reefs with different morphology. The morphology assignments were massive, tabular, and branching (3-level categorical covariate). The morphological assignments were treated as fixed factors and the site as random (in order to take into account the correlation between reefs due to their geographical position). The model is&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ logit(Disease Presense_{ik}) =  \sum_j \beta_j x_{ik} + b_i \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(j_{1:3} = \{massive, tabular, branching\}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(b_i\)&lt;/span&gt; are the reef-specific intercepts. Such a &lt;span class=&#34;math inline&#34;&gt;\(b_i\)&lt;/span&gt; represents the deviation of the intercept of a specific reef from the average intercept in the group to which that reef belongs, i.e deviation from &lt;span class=&#34;math inline&#34;&gt;\(\beta_1\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\beta_2\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(\beta_3\)&lt;/span&gt;. The model is fitted only for reefs unaffected by plastic waste. The output is given in Fig. 4(B) in the paper. The conclusion is the disease risk increases from massive to branching and tabular reefs when not in contact with plastic debris (Fig. 4(B) and table S13).&lt;/p&gt;
&lt;p&gt;The issue with this figure is the authors give a population-average interpretation of the coefficients. In GLLMs the fixed effects have a site-specific interpretation but not a population-average one. Let us now consider the logistic random-intercepts model above. The conditional means &lt;span class=&#34;math inline&#34;&gt;\(E[Disease Presense_{ik}|b_i]\)&lt;/span&gt; are given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ E[Disease Presense_{ik}|b_i] = \frac{\exp(\sum_j \beta_j x_{ik} + b_i)}{1 + \exp(\sum_j \beta_j x_{ik} + b_i)} \]&lt;/span&gt; where &lt;span class=&#34;math inline&#34;&gt;\(E[.]\)&lt;/span&gt; is the expectation operator. The above model assumes logistic change in prevalence of disease for each morphology, all having different intercepts &lt;span class=&#34;math inline&#34;&gt;\(\beta_0 + b_i\)&lt;/span&gt;. The average reef, i.e, the reef with intercept &lt;span class=&#34;math inline&#34;&gt;\(b_i = 0\)&lt;/span&gt;, has disease probability given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ E[Disease Presense_{ik}|b_i = 0] = \frac{\exp(\sum_j \beta_j x_{ik} + 0)}{1 + \exp(\sum_j \beta_j x_{ik} + 0)} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;which is what the authors have calculated and produced Fig. 4. In other words, the authors have calculated the probability of disease for an “average” reef. They proceed interpreting this as marginal effect, which is wrong.&lt;/p&gt;
&lt;p&gt;The issue arises due to the conditional interpretation, conditionally upon level of random effects, of the &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;s in a GLMM model. And this is due to the fact that &lt;span class=&#34;math inline&#34;&gt;\(E[g(Y )] \neq g[E(Y)]\)&lt;/span&gt; unless &lt;span class=&#34;math inline&#34;&gt;\(g\)&lt;/span&gt; is linear, which is not the case for this model. In what follows I fit the same model and demonstrate how the conclusions change when conditioning of different levels of the random coefficients. The code the authors use is&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# GLMM, Baseline Disease levels for different growth forms, Asia Pacific --------
library(lme4)
Normal.Disease.Growth = glmer(Disease ~ -1 + Growth2+(1|Reef_Name), 
                              data = Plastic[which(Plastic$Plastic==0),], 
                              family = &amp;#39;binomial&amp;#39;, 
                              control = glmerControl(optimizer =&amp;quot;bobyqa&amp;quot;))

# As a sidenote: This code uses a Laplace approximation (nAGQ = 1 - the default) on the integral over the random effects space. &amp;quot;Values greater than 1 produce greater accuracy in the evaluation of the log-likelihood at the expense of speed&amp;quot;. The authors of the package suggest values up to 25 (see the documentation). &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following reproduces Fig. 4(B) of the publication.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# PDF, Baseline disease levels by growth form -----------------------------
NormalDisease.by.Growth = data.frame(Tabular = rnorm(100000, mean = -3.1332, sd = .1549),
                                     Massive = rnorm(100000, mean = -3.8153, sd = .1095),
                                     Branching = rnorm(100000, mean = -3.5534, sd = .1103))
NormalDisease.by.Growth$Tabularbt = plogis(NormalDisease.by.Growth$Tabular)
NormalDisease.by.Growth$Massivebt = plogis(NormalDisease.by.Growth$Massive)
NormalDisease.by.Growth$Branchingbt = plogis(NormalDisease.by.Growth$Branching)
NormalDisease.by.Growth = gather(NormalDisease.by.Growth, Growth, Estimate, Tabularbt:Branchingbt)

library(ggplot2)
ggplot(aes(x = Estimate*100), data = NormalDisease.by.Growth) +
   geom_density(aes(y = ..scaled.., fill = Growth)) +
   scale_x_continuous(limits = c(0, 10)) + 
   ylab(&amp;quot;&amp;quot;) + 
   labs(fill = &amp;quot;Morphology&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/reefs/2018-03-26-plastic-waste-and-disease-on-coral-reefs_files/figure-html/plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is evident from the code that they plot the fixed effects estimates with their standard errors. This plot ignores the random effects and it only takes into consideration the variation of the fixed coefficients &lt;span class=&#34;math inline&#34;&gt;\(\beta_j\)&lt;/span&gt;. To get an idea for the variability of the random effects I simulate them from the model and plot them. Points that are distinguishable from zero (i.e. the confidence band based on level does not cross the red line) are highlighted. We see substantial variation on the random effects estimates with many “outliers” with both high and low averages that need to be accounted for.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(merTools)
sim_rfs_Normal.Disease &amp;lt;- REsim(Normal.Disease.Growth, n.sims = 200) 
plotREsim(sim_rfs_Normal.Disease)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/reefs/2018-03-26-plastic-waste-and-disease-on-coral-reefs_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What the authors are effectively doing in Fig. 4(B) (see density plot above) is presenting the results for reefs with &lt;span class=&#34;math inline&#34;&gt;\(b_i = 0\)&lt;/span&gt; which corresponds to the red horizontal line. Let’s see how the density plot changes when we condition on more “extreme” reefs. I use the 0.1 and 0.9 quantiles.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quantile0.9 &amp;lt;- REquantile(Normal.Disease.Growth, quantile = 0.9, groupFctr = &amp;quot;Reef_Name&amp;quot;)
#which(sim_rfs_Normal.Disease$groupID == quantile0.9)

quantile0.1 &amp;lt;- REquantile(Normal.Disease.Growth, quantile = 0.1, groupFctr = &amp;quot;Reef_Name&amp;quot;)
#which(sim_rfs_Normal.Disease$groupID == quantile0.1)

NormalDisease.by.Growth_quantile0.9 = data.frame(
   Tabular = rnorm(100000, mean = -3.1332 + 1.495773, sd = .1549),
   Massive = rnorm(100000, mean = -3.8153 + 1.495773, sd = .1095),
   Branching = rnorm(100000, mean = -3.5534 + 1.495773, sd = .1103))
NormalDisease.by.Growth_quantile0.9$Tabularbt = plogis(NormalDisease.by.Growth_quantile0.9$Tabular)
NormalDisease.by.Growth_quantile0.9$Massivebt = plogis(NormalDisease.by.Growth_quantile0.9$Massive)
NormalDisease.by.Growth_quantile0.9$Branchingbt = plogis(NormalDisease.by.Growth_quantile0.9$Branching)
NormalDisease.by.Growth_quantile0.9 = gather(NormalDisease.by.Growth_quantile0.9, Growth, Estimate, Tabularbt:Branchingbt)
NormalDisease.by.Growth_quantile0.1 = data.frame(
   Tabular = rnorm(100000, mean = -3.1332 - 1.689569, sd = .1549),
   Massive = rnorm(100000, mean = -3.8153 - 1.689569, sd = .1095),
   Branching = rnorm(100000, mean = -3.5534 - 1.689569, sd = .1103))

NormalDisease.by.Growth_quantile0.1$Tabularbt = plogis(NormalDisease.by.Growth_quantile0.1$Tabular)
NormalDisease.by.Growth_quantile0.1$Massivebt = plogis(NormalDisease.by.Growth_quantile0.1$Massive)
NormalDisease.by.Growth_quantile0.1$Branchingbt = plogis(NormalDisease.by.Growth_quantile0.1$Branching)
NormalDisease.by.Growth_quantile0.1 = gather(NormalDisease.by.Growth_quantile0.1, Growth, Estimate, Tabularbt:Branchingbt)

NormalDisease.by.Growth$ID = &amp;quot;average&amp;quot;
NormalDisease.by.Growth_quantile0.1$ID = &amp;quot;0.1quantile&amp;quot;
NormalDisease.by.Growth_quantile0.9$ID = &amp;quot;0.9quantile&amp;quot;

overall &amp;lt;- rbind(NormalDisease.by.Growth, NormalDisease.by.Growth_quantile0.1, NormalDisease.by.Growth_quantile0.9)
ggplot(aes(x = Estimate*100, col = ID), data = overall) +
   geom_density(aes(y = ..scaled.., fill = Growth), alpha = 0.9, size = 1.3) +
   scale_fill_brewer(palette = &amp;quot;Spectral&amp;quot;) + 
   #scale_fill_manual(values = c(&amp;quot;#D55E00&amp;quot;, &amp;quot;#009E73&amp;quot;, &amp;quot;#0072B2&amp;quot;)) + 
   scale_color_manual(values = c(&amp;quot;#000000&amp;quot;, &amp;quot;dodgerblue&amp;quot;, &amp;quot;darkmagenta&amp;quot;)) +
   scale_x_continuous(limits = c(0, 10)) + 
   ylab(&amp;quot;&amp;quot;) + 
   labs(col = &amp;quot;R effect&amp;quot;, fill = &amp;quot;Morphology&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/reefs/2018-03-26-plastic-waste-and-disease-on-coral-reefs_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is evident both the center and the variability of the distributions change depending whether we look an “average” coral reef (purple line), a reef towards the upper extreme (blue line) or the lower extreme (black line). So the conclusions should be something along the lines: the increase in disease likelihood with plastic debris depends also on inherit/unobserved characteristics of the reefs, captured by the random effects, in addition to their morphology.&lt;/p&gt;
&lt;p&gt;Of course, what I have presented above is still conditional interpretation of the parameters. Ideally, we want the marginal population-average interpretation which is obtained from averaging over the random effects. This allows to take into account both the residual (observation-level) variance, the uncertainty in the variance parameters for the grouping factors added to the uncertainty in the fixed coefficients. See for example the &lt;code&gt;predictInterval()&lt;/code&gt; function of the &lt;a href=&#34;https://cran.r-project.org/web/packages/merTools/merTools.pdf&#34;&gt;&lt;code&gt;merTools&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1 unnumbered&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-dryad_mp480&#34;&gt;
&lt;p&gt;Lamb, JB, BL Willis, EA Fiorenza, CS Couch, R Howard, DN Rader, JD True, et al. 2018. “Data from: Plastic Waste Associated with Disease on Coral Reefs.” &lt;em&gt;Science&lt;/em&gt;. Dryad Digital Repository. doi:&lt;a href=&#34;https://doi.org/10.5061/dryad.mp480&#34;&gt;10.5061/dryad.mp480&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-lamb2018plastic&#34;&gt;
&lt;p&gt;Lamb, Joleah B, Bette L Willis, Evan A Fiorenza, Courtney S Couch, Robert Howard, Douglas N Rader, James D True, et al. 2018. “Plastic Waste Associated with Disease on Coral Reefs.” &lt;em&gt;Science&lt;/em&gt; 359 (6374). American Association for the Advancement of Science: 460–62.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>On statistical reporting in biomedical journals</title>
      <link>/post/stat_reporting/on-statistical-reporting-in-biomedical-journals/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/stat_reporting/on-statistical-reporting-in-biomedical-journals/</guid>
      <description>&lt;p&gt;Poor quality statistical reporting in the biomedical literature is not uncommon. Here is another example by &lt;span class=&#34;citation&#34;&gt;Cirio et al. (&lt;a href=&#34;#ref-cirio2016effects&#34;&gt;2016&lt;/a&gt;)&lt;/span&gt;. The study itself is well planed, executed and reported. The aim was to assess whether heated and humidified high flow gases delivered through nasal cannula (HFNC) improve exercise performance in severe chronic obstructive pulmonary disease (COPD) patients. It all started when I saw their Fig.1. Here is my attempt to reproduce it&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:figs&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/stat_reporting/2018-04-25-on-statistical-reporting-in-biomedical-journals_files/figure-html/figs-1.png&#34; alt=&#34;Effect of the HFNC on exercise capacity compared to a control condition. Tlim = exercise duration.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Effect of the HFNC on exercise capacity compared to a control condition. Tlim = exercise duration.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In total there are 12 patients tested twice; once under the control test and once under the NFNC test. The outcome of interest is the endurance time (Tlim; y axis). This is practically how long each test lasted. The authors hypothesized that HFNC would improve exercise performance, that is the test would last longer. This was the case since Tlim increased for all subjects under the NFNC test (see figure &lt;a href=&#34;#fig:figs&#34;&gt;1&lt;/a&gt;). Moreover, this increase reached statistical significance (p-value = 0.015) - ready to publish! Looking at the plot I was pondered about the “outlying” patient (red dot). His/her Tlim increased by a whooping 400 seconds! This is huge compared to the other patients. Then I wondered how would the results change if we excluded him/her from the analysis? And here is where the problems start.&lt;/p&gt;
&lt;p&gt;There is no way from the text to figure out which test was used to produce the p-value of 0.015. Is is a paired t-test or a Wilcoxon test? (they mention both in the statistical analysis section). So it is impossible to evaluate and/or try to reproduce the results.&lt;/p&gt;
&lt;p&gt;Having abandoned the idea of being able to reproduce the analysis I started thinking about reporting guidelines, hence the title of this post. I thought the journal must have guidelines for reporting statistical analysis. No, it does not and unfortunately, most of the biomedical journals don’t have such guidelines even though 40 years ago O’Fallon and colleges recommended that “Standards governing the content and format of statistical aspects should be developed to guide authors in the preparation of manuscripts” &lt;span class=&#34;citation&#34;&gt;(O’Fallon et al. &lt;a href=&#34;#ref-o1978should&#34;&gt;1978&lt;/a&gt;)&lt;/span&gt;. Since then many have repeated the message. A few sporadic attempts are usually editorials such as &lt;span class=&#34;citation&#34;&gt;Cummings and Rivara (&lt;a href=&#34;#ref-cummings2003reporting&#34;&gt;2003&lt;/a&gt;)&lt;/span&gt;, &lt;span class=&#34;citation&#34;&gt;Curran-Everett and Benos (&lt;a href=&#34;#ref-curran2004guidelines&#34;&gt;2004&lt;/a&gt;)&lt;/span&gt; and &lt;span class=&#34;citation&#34;&gt;Arifin et al. (&lt;a href=&#34;#ref-arifin2016reporting&#34;&gt;2016&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Recently, &lt;span class=&#34;citation&#34;&gt;Lang and Altman (&lt;a href=&#34;#ref-lang2013basic&#34;&gt;2013&lt;/a&gt;)&lt;/span&gt; published a comprehensive set of statistical reporting guidelines suitable for medical journals - the SAMPL guidelines. “The SAMPL guidelines are designed to be included in a journal’s Instructions for Authors”. So the journals just need to refer to them! As there are many general reporting guidelines based on the study design as such CONSORT, STROBE, PRISMA etc (see &lt;a href=&#34;http://www.equator-network.org/&#34; class=&#34;uri&#34;&gt;http://www.equator-network.org/&lt;/a&gt;) that authors in many journals must adhere to, I believe the SAMPL guidelines is a big step forward on reporting statistics. The only journal (that I know of) that suggests the use of the SAMPL guidelines is the British Journal of Dermatology &lt;span class=&#34;citation&#34;&gt;(Hollestein and Nijsten &lt;a href=&#34;#ref-hollestein2015guidelines&#34;&gt;2015&lt;/a&gt;)&lt;/span&gt;. (I’ll keep adding to this list).&lt;/p&gt;
&lt;p&gt;Now that the guidelines exist, let’s make use of them.&lt;/p&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1 unnumbered&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-arifin2016reporting&#34;&gt;
&lt;p&gt;Arifin, Wan Nor, Abdullah Sarimah, Bachok Norsa’adah, Yaacob Najib Majdi, Ab Hamid Siti-Azrin, Musa Kamarul Imran, Abd Aziz Aniza, and Lin Naing. 2016. “Reporting Statistical Results in Medical Journals.” &lt;em&gt;The Malaysian Journal of Medical Sciences: MJMS&lt;/em&gt; 23 (5). School of Medical Sciences, Universiti Sains Malaysia: 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-cirio2016effects&#34;&gt;
&lt;p&gt;Cirio, Serena, Manuela Piran, Michele Vitacca, Giancarlo Piaggi, Piero Ceriana, Matteo Prazzoli, Mara Paneroni, and Annalisa Carlucci. 2016. “Effects of Heated and Humidified High Flow Gases During High-Intensity Constant-Load Exercise on Severe Copd Patients with Ventilatory Limitation.” &lt;em&gt;Respiratory Medicine&lt;/em&gt; 118. Elsevier: 128–32.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-cummings2003reporting&#34;&gt;
&lt;p&gt;Cummings, Peter, and Frederick P Rivara. 2003. “Reporting Statistical Information in Medical Journal Articles.” &lt;em&gt;Archives of Pediatrics &amp;amp; Adolescent Medicine&lt;/em&gt; 157 (4). American Medical Association: 321–24.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-curran2004guidelines&#34;&gt;
&lt;p&gt;Curran-Everett, Douglas, and Dale J Benos. 2004. “Guidelines for Reporting Statistics in Journals Published by the American Physiological Society.” Am Physiological Soc.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-hollestein2015guidelines&#34;&gt;
&lt;p&gt;Hollestein, LM, and Tamar Nijsten. 2015. “Guidelines for Statistical Reporting in the British Journal of Dermatology.” &lt;em&gt;British Journal of Dermatology&lt;/em&gt; 173 (1). Wiley Online Library: 3–5.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-lang2013basic&#34;&gt;
&lt;p&gt;Lang, Thomas A, and Douglas G Altman. 2013. “Basic Statistical Reporting for Articles Published in Biomedical Journals: The ‘Statistical Analyses and Methods in the Published Literature’ or the Sampl Guidelines”.” &lt;em&gt;Handbook, European Association of Science Editors&lt;/em&gt; 256. Wiley Online Library: 256.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-o1978should&#34;&gt;
&lt;p&gt;O’Fallon, JR, SD Dubey, DS Salsburg, JH Edmonson, A Soffer, and T Colton. 1978. “Should There Be Statistical Guidelines for Medical Research Papers?” &lt;em&gt;Biometrics&lt;/em&gt;. JSTOR, 687–95.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Importing Flat Files Into R</title>
      <link>/post/importflatfiles/importing-flat-files-into-r/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/importflatfiles/importing-flat-files-into-r/</guid>
      <description>&lt;p&gt;There are many tutorials for importing data into R focusing on a specific function/package. This one focuses on 3 different packages. You will learn how to import all common formats of flat file data with base R functions and the dedicated &lt;code&gt;readr&lt;/code&gt; and &lt;code&gt;data.table&lt;/code&gt; packages. I first present these three packages and finish with a comparison table between them.&lt;/p&gt;
&lt;div id=&#34;task&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Task&lt;/h2&gt;
&lt;p&gt;Import a flat file into R: create an R object that contains the data from a flat file.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-is-a-flat-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What is a flat file?&lt;/h2&gt;
&lt;p&gt;A flat file can be a plain text file that contains table data. A form of flat file is one in which table data is gathered in lines with the value from each table cell separated by a comma and each row represented with a new line. This type of flat file is also known as a comma-separated values (CSV) file. An alternative is a tab-delimited file where each field value is separated from the next using tabs.&lt;/p&gt;
&lt;p&gt;The following sections describe various options for importing flat files. The ultimate goal is to convey, “translate”, them into an R &lt;strong&gt;data.frame&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;what-are-we-going-to-import&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What are we going to import?&lt;/h2&gt;
&lt;p&gt;For illustration purposes we use the &lt;a href=&#34;http://perso.telecom-paristech.fr/~eagan/class/as2013/inf229/labs/datasets&#34;&gt;Happiness&lt;/a&gt; dataset. It is based on the European quality of life survey with questions related to income, life satisfaction or perceived quality of society. The file is quite small but enough to sharpen your importing skills. It provides the average rating for the question “How happy would you say you are these days?”. Rating 1 (low) to 10 (high) by country and gender.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##    Country Gender Mean   N.
## 1       AT   Male  7.3  471
## 2          Female  7.3  570
## 3            Both  7.3 1041
## 4       BE   Male  7.8  468
## 5          Female  7.8  542
## 6            Both  7.8 1010
## 7       BG   Male  5.8  416
## 8          Female  5.8  555
## 9            Both  5.8  971
## 10      CY   Male  7.8  433&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;lets-get-going-the-utils&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Let’s get going… the &lt;code&gt;utils&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We start with the &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/&#34;&gt;&lt;code&gt;utils&lt;/code&gt;&lt;/a&gt; package. This package is loaded by default when you start your R session. This means that you can access its functions without further due. Here, we are interested in three of them: &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.table()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.csv()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.delim()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;reading-data-with-read.table&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reading data with &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.table()&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Reads a file in table format and creates an R &lt;strong&gt;data.frame&lt;/strong&gt; from it, with cases corresponding to rows and variables to columns. Let’s see how it works for our dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;happiness &amp;lt;- read.table(&amp;quot;happiness.csv&amp;quot;)
head(happiness)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                       V1
## 1 Country,Gender,Mean,N=
## 2        AT,Male,7.3,471
## 3        ,Female,7.3,570
## 4         ,Both,7.3,1041
## 5        BE,Male,7.8,468
## 6        ,Female,7.8,542&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not what we wanted?! This data frame contains 108 rows and 1 column instead of 105 rows and 4 columns. That’s because additional arguments need to be specified in order to tell R what it has to deal with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;happiness &amp;lt;- read.table(file = &amp;quot;happiness.csv&amp;quot;,     # path to flat file 
                        header = TRUE,              # first row lists variables&amp;#39; names
                        sep = &amp;quot;,&amp;quot;,                  # field separator is a comma
                        stringsAsFactors = FALSE)   # not import strings as categorical variables&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look now&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(happiness)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Country Gender Mean   N.
## 1      AT   Male  7.3  471
## 2         Female  7.3  570
## 3           Both  7.3 1041
## 4      BE   Male  7.8  468
## 5         Female  7.8  542
## 6           Both  7.8 1010&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(happiness)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    105 obs. of  4 variables:
##  $ Country: chr  &amp;quot;AT&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;BE&amp;quot; ...
##  $ Gender : chr  &amp;quot;Male&amp;quot; &amp;quot;Female&amp;quot; &amp;quot;Both&amp;quot; &amp;quot;Male&amp;quot; ...
##  $ Mean   : num  7.3 7.3 7.3 7.8 7.8 7.8 5.8 5.8 5.8 7.8 ...
##  $ N.     : int  471 570 1041 468 542 1010 416 555 971 433 ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By specifying &lt;code&gt;header = TRUE&lt;/code&gt; R sees the that the first line contains the names of the variables. With &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt; we specify that we wanted &lt;code&gt;Country&lt;/code&gt; and &lt;code&gt;Gender&lt;/code&gt; to be character variables. The &lt;code&gt;sep = &amp;quot;,&amp;quot;&lt;/code&gt; identifies the field separator to be a comma. There are many more arguments you can specify and each one can take many values! For further details, consult the &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;R documentation&lt;/a&gt; or type &lt;code&gt;help(read.table)&lt;/code&gt; on the console.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: In order to use &lt;code&gt;read.table()&lt;/code&gt;, in same manner, you need to give the full path name of the target file if it’s not in your working directory. You can use the &lt;a href=&#34;http://rfunction.com/archives/1001&#34;&gt;R Function of the Day&lt;/a&gt;, namely &lt;code&gt;setwd(&amp;quot;&amp;lt;location of your dataset&amp;gt;&amp;quot;)&lt;/code&gt;, to change your working directory. The same is valid for any other function we are going to encounter in this tutorial. Alternatively, you can specify the location of the flat file inside &lt;code&gt;read.table()&lt;/code&gt;. Keep in mind that the specification of the file is platform dependent (Windows, Unix/Linux and OSX).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read.table(file = &amp;quot;&amp;lt;location of your dataset&amp;gt;&amp;quot;, ...) &lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Another option is to use &lt;a href=&#34;http://www.rdocumentation.org/packages/base/functions/file.path&#34;&gt;&lt;code&gt;file.path()&lt;/code&gt;&lt;/a&gt;. It constructs the path to a file from components in a platform-independent way. For example,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;path &amp;lt;- file.path(&amp;quot;~&amp;quot;, &amp;quot;datasets&amp;quot;, &amp;quot;happiness.csv&amp;quot;)     

happiness &amp;lt;- read.table(file = path,    
                        header = TRUE,             
                        sep = &amp;quot;,&amp;quot;,                  
                        stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Comment&lt;/strong&gt; The &lt;code&gt;stringsAsFactors&lt;/code&gt; argument is true by default which means that character variables are imported into R as factors, the data type to store categorical variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;happiness_2 &amp;lt;- read.table(file = &amp;quot;happiness.csv&amp;quot;,    
                        header = TRUE,             
                        sep = &amp;quot;,&amp;quot;,                  
                        stringsAsFactors = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first sight you do not notice anything different and you shouldn’t! But for R it’s a big deal! For character variables each element is a string of one or more characters. On the other hand, factor variables are stored, internally, as numeric variables together with their levels. This has major impact in computations that R maybe has to carry out later.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(happiness_2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    105 obs. of  4 variables:
##  $ Country: Factor w/ 36 levels &amp;quot;&amp;quot;,&amp;quot;AT&amp;quot;,&amp;quot;BE&amp;quot;,&amp;quot;BG&amp;quot;,..: 2 1 1 3 1 1 4 1 1 6 ...
##  $ Gender : Factor w/ 3 levels &amp;quot;Both&amp;quot;,&amp;quot;Female&amp;quot;,..: 3 2 1 3 2 1 3 2 1 3 ...
##  $ Mean   : num  7.3 7.3 7.3 7.8 7.8 7.8 5.8 5.8 5.8 7.8 ...
##  $ N.     : int  471 570 1041 468 542 1010 416 555 971 433 ...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-data-with-read.csv&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reading data with &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.csv()&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is a wrapper around &lt;code&gt;read.table()&lt;/code&gt;. This means that &lt;code&gt;read.csv()&lt;/code&gt; calls &lt;code&gt;read.table()&lt;/code&gt; behind the scenes but with different default arguments. More specifically, the defaults are &lt;code&gt;header = TRUE&lt;/code&gt; and &lt;code&gt;sep = &amp;quot;,&amp;quot;&lt;/code&gt;. These match with the standardized CSV format, where &lt;code&gt;,&lt;/code&gt; is used as a separator and usually the first line contains the names of the columns. Therefore, it saves you time since you need to specify less arguments.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read.csv(file = &amp;quot;happiness.csv&amp;quot;,   
                        stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which is equivalent to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read.table(file = &amp;quot;happiness.csv&amp;quot;,    
                        header = TRUE,             
                        sep = &amp;quot;,&amp;quot;,                  
                        stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-data-with-read.delim&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reading data with &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.delim()&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It is also a wrapper of &lt;code&gt;read.table()&lt;/code&gt;. Now the default arguments match with tab-delimited files. More specifically, the defaults are &lt;code&gt;header = TRUE&lt;/code&gt; and &lt;code&gt;sep = &amp;quot;\t&amp;quot;&lt;/code&gt;, since &lt;code&gt;\t&lt;/code&gt; is the field separator in tab-delimited files.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read.delim(file = &amp;quot;happiness.txt&amp;quot;,    
                        stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which is equivalent to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;read.table(file = &amp;quot;happiness.txt&amp;quot;,    
                        header = TRUE,             
                        sep = &amp;quot;\t&amp;quot;,                  
                        stringsAsFactors = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both these functions make our lives easier since less arguments need to be specified.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Locale differences. The standard field delimiters for CSV files are commas. On US versions, the comma is set as default for the “List Separator”, which is okay for CSV files. But on European versions this character is reserved as the Decimal Symbol and the “List Separator” is set by default to the semicolon. Why you should care?&lt;/p&gt;
&lt;p&gt;Suppose you try to import the European CSV version &lt;code&gt;happiness_eu.csv&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(happiness_eu)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Country.Gender.Mean.N.
## 1        AT,Male,7.3,471
## 2        ,Female,7.3,570
## 3         ,Both,7.3,1041
## 4        BE,Male,7.8,468
## 5        ,Female,7.8,542
## 6         ,Both,7.8,1010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;R performs the operation but clearly not the one we wanted. It’s a data frame with 105 rows but a single variable! To deal with such problems you can use the &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.csv2()&lt;/code&gt;&lt;/a&gt; function. The defaults are &lt;code&gt;sep = &amp;quot;;&amp;quot;&lt;/code&gt; and &lt;code&gt;dec = &amp;quot;,&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;happiness_eu &amp;lt;- read.csv2(file = &amp;quot;happiness_eu.csv&amp;quot;,  
                        stringsAsFactors = FALSE)
head(happiness_eu)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Country Gender Mean   N.
## 1      AT   Male  7.3  471
## 2         Female  7.3  570
## 3           Both  7.3 1041
## 4      BE   Male  7.8  468
## 5         Female  7.8  542
## 6           Both  7.8 1010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, there is &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.delim2()&lt;/code&gt;&lt;/a&gt;. The logic is the same.&lt;/p&gt;
&lt;p&gt;To summarize, the &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.table()&lt;/code&gt;&lt;/a&gt; is to read delimited data files. Some variants are: &lt;code&gt;read.csv()&lt;/code&gt; and &lt;code&gt;read.delim()&lt;/code&gt;, which have different default values and are tailored for CSV and tab-delimited files, respectively.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.csv()&lt;/code&gt;&lt;/a&gt; default values are: &lt;code&gt;header = T&lt;/code&gt;, &lt;code&gt;sep = ???,???&lt;/code&gt;, &lt;code&gt;dec = ???.???&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.csv2()&lt;/code&gt;&lt;/a&gt; default values are: &lt;code&gt;header = T&lt;/code&gt;, &lt;code&gt;sep = ???;???&lt;/code&gt;, &lt;code&gt;dec = ???,???&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.delim()&lt;/code&gt;&lt;/a&gt; default values are: &lt;code&gt;header = T&lt;/code&gt;, &lt;code&gt;sep = ???\t???&lt;/code&gt;, &lt;code&gt;dec = ???.???&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;a href=&#34;http://www.rdocumentation.org/packages/utils/functions/read.table&#34;&gt;&lt;code&gt;read.delim2()&lt;/code&gt;&lt;/a&gt; default values are: &lt;code&gt;header = T&lt;/code&gt;, &lt;code&gt;sep = ???\t???&lt;/code&gt;, &lt;code&gt;dec = ???,???&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;readr-an-alternative-to-import-flat-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/readr/readr.pdf&#34;&gt;&lt;code&gt;readr&lt;/code&gt;&lt;/a&gt; … an alternative to import flat files&lt;/h2&gt;
&lt;p&gt;An alternative to the &lt;code&gt;utils&lt;/code&gt; package is the &lt;a href=&#34;https://cran.r-project.org/web/packages/readr/readr.pdf&#34;&gt;&lt;code&gt;readr&lt;/code&gt;&lt;/a&gt;. Compared the &lt;code&gt;read.table&lt;/code&gt; family of functions, it is faster, easier to use and with a consistent naming scheme. We start by installing and loading it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;readr&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s import our dataset. In &lt;code&gt;readr&lt;/code&gt; you can use &lt;a href=&#34;https://cran.r-project.org/web/packages/readr/readr.pdf&#34;&gt;&lt;code&gt;read_delim()&lt;/code&gt;&lt;/a&gt; for flat files. It can be considered the correspondent to &lt;code&gt;read.table()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;happiness_readr &amp;lt;- read_delim(&amp;quot;happiness.csv&amp;quot;,        # path to flat file 
                              delim = &amp;quot;,&amp;quot;)            # character that separates fields in the file&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   Country = col_character(),
##   Gender = col_character(),
##   Mean = col_double(),
##   `N=` = col_integer()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(happiness_readr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    105 obs. of  4 variables:
##  $ Country: chr  &amp;quot;AT&amp;quot; NA NA &amp;quot;BE&amp;quot; ...
##  $ Gender : chr  &amp;quot;Male&amp;quot; &amp;quot;Female&amp;quot; &amp;quot;Both&amp;quot; &amp;quot;Male&amp;quot; ...
##  $ Mean   : num  7.3 7.3 7.3 7.8 7.8 7.8 5.8 5.8 5.8 7.8 ...
##  $ N=     : int  471 570 1041 468 542 1010 416 555 971 433 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 4
##   .. ..$ Country: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Gender : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Mean   : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_double&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ N=     : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(happiness_readr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   Country Gender  Mean  `N=`
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1 AT      Male    7.30   471
## 2 &amp;lt;NA&amp;gt;    Female  7.30   570
## 3 &amp;lt;NA&amp;gt;    Both    7.30  1041
## 4 BE      Male    7.80   468
## 5 &amp;lt;NA&amp;gt;    Female  7.80   542
## 6 &amp;lt;NA&amp;gt;    Both    7.80  1010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice, that the output is the same as when using the &lt;code&gt;read.table()&lt;/code&gt;, previously. But we did not have to specify &lt;code&gt;header=TRUE&lt;/code&gt; because by default &lt;code&gt;read_delim()&lt;/code&gt; expects the first row to contain the column names. This is done through the &lt;code&gt;col_names&lt;/code&gt; argument, set equal to true by default. Also, strings are never automatically converted to factors. Hence, &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt; is not necessary. To control the types of the columns &lt;code&gt;readr&lt;/code&gt; uses the &lt;code&gt;col_types&lt;/code&gt; argument. Let’s see how these two work.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;col_names&lt;/code&gt; is true by default meaning that it will use the the first row of data as column names. If your file does not have column names you can set &lt;code&gt;col_names = FALSE&lt;/code&gt; and columns will be numbered sequentially.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(read_delim(&amp;quot;happiness2.csv&amp;quot;, delim = &amp;quot;,&amp;quot;,
                              col_names = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   X1 = col_character(),
##   X2 = col_character(),
##   X3 = col_double(),
##   X4 = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   X1    X2        X3 X4   
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;
## 1 &amp;#39;AT   Male    7.30 471&amp;#39; 
## 2 &amp;#39;     Female  7.30 570&amp;#39; 
## 3 &amp;#39;     Both    7.30 1041&amp;#39;
## 4 &amp;#39;BE   Male    7.80 468&amp;#39; 
## 5 &amp;#39;     Female  7.80 542&amp;#39; 
## 6 &amp;#39;     Both    7.80 1010&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Instead of assigning the output of &lt;code&gt;read_delim()&lt;/code&gt; to a variable I directly use the &lt;code&gt;head()&lt;/code&gt; function to print the first 6 lines of the data frame. It is equivalent to&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;happiness_delim &amp;lt;- read_delim(&amp;quot;happiness2.csv&amp;quot;, delim = &amp;quot;,&amp;quot;,
                              col_names = FALSE)
head(happiness_delim)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also manually set the column names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(read_delim(&amp;quot;happiness2.csv&amp;quot;, delim = &amp;quot;,&amp;quot;,
                              col_names = c(&amp;quot;Country&amp;quot;, &amp;quot;Gender&amp;quot;, &amp;quot;Mean&amp;quot;, &amp;quot;N&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   Country = col_character(),
##   Gender = col_character(),
##   Mean = col_double(),
##   N = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   Country Gender  Mean N    
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;
## 1 &amp;#39;AT     Male    7.30 471&amp;#39; 
## 2 &amp;#39;       Female  7.30 570&amp;#39; 
## 3 &amp;#39;       Both    7.30 1041&amp;#39;
## 4 &amp;#39;BE     Male    7.80 468&amp;#39; 
## 5 &amp;#39;       Female  7.80 542&amp;#39; 
## 6 &amp;#39;       Both    7.80 1010&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned, there is &lt;code&gt;col_types&lt;/code&gt; to control the column classes. If you leave the default value &lt;code&gt;readr&lt;/code&gt; heuristically inspects the first 100 rows to guess the type of each column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sapply(happiness_readr, class)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Country      Gender        Mean          N= 
## &amp;quot;character&amp;quot; &amp;quot;character&amp;quot;   &amp;quot;numeric&amp;quot;   &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to override the default column types you can also specify them manually. An option would be&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;happiness_readr2 &amp;lt;- read_delim(&amp;quot;happiness.csv&amp;quot;, delim = &amp;quot;,&amp;quot;, 
                               col_types = &amp;quot;ccni&amp;quot;)
sapply(happiness_readr2, class)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Country      Gender        Mean          N= 
## &amp;quot;character&amp;quot; &amp;quot;character&amp;quot;   &amp;quot;numeric&amp;quot;   &amp;quot;integer&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; = character&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; = double&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; = integer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; = logical&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; = skip&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let see how &lt;code&gt;skip&lt;/code&gt; works&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(read_delim(&amp;quot;happiness.csv&amp;quot;, delim = &amp;quot;,&amp;quot;, 
                               col_types = &amp;quot;ccn_&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   Country Gender  Mean
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 AT      Male    7.30
## 2 &amp;lt;NA&amp;gt;    Female  7.30
## 3 &amp;lt;NA&amp;gt;    Both    7.30
## 4 BE      Male    7.80
## 5 &amp;lt;NA&amp;gt;    Female  7.80
## 6 &amp;lt;NA&amp;gt;    Both    7.80&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the fourth column has been skipped.&lt;/p&gt;
&lt;p&gt;Yet another way of setting the types of the imported columns is using collectors. Collector functions can be passed in a &lt;a href=&#34;http://www.rdocumentation.org/packages/base/functions/list&#34;&gt;&lt;code&gt;list()&lt;/code&gt;&lt;/a&gt; to the &lt;code&gt;col_types&lt;/code&gt; argument of &lt;code&gt;read_&lt;/code&gt; functions to tell them how to interpret values in a column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;car &amp;lt;- col_character()
fac &amp;lt;- col_factor(levels = c(&amp;quot;Male&amp;quot;, &amp;quot;Female&amp;quot;, &amp;quot;Both&amp;quot;))
num &amp;lt;- col_number()
int &amp;lt;- col_integer()

str(read_delim(&amp;quot;happiness.csv&amp;quot;, delim = &amp;quot;,&amp;quot; , 
                           col_types = list(car, fac, num, int)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;tbl_df&amp;#39;, &amp;#39;tbl&amp;#39; and &amp;#39;data.frame&amp;#39;:    105 obs. of  4 variables:
##  $ Country: chr  &amp;quot;AT&amp;quot; NA NA &amp;quot;BE&amp;quot; ...
##  $ Gender : Factor w/ 3 levels &amp;quot;Male&amp;quot;,&amp;quot;Female&amp;quot;,..: 1 2 3 1 2 3 1 2 3 1 ...
##  $ Mean   : num  7.3 7.3 7.3 7.8 7.8 7.8 5.8 5.8 5.8 7.8 ...
##  $ N=     : int  471 570 1041 468 542 1010 416 555 971 433 ...
##  - attr(*, &amp;quot;spec&amp;quot;)=List of 2
##   ..$ cols   :List of 4
##   .. ..$ Country: list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_character&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Gender :List of 3
##   .. .. ..$ levels    : chr  &amp;quot;Male&amp;quot; &amp;quot;Female&amp;quot; &amp;quot;Both&amp;quot;
##   .. .. ..$ ordered   : logi FALSE
##   .. .. ..$ include_na: logi FALSE
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_factor&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ Mean   : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_number&amp;quot; &amp;quot;collector&amp;quot;
##   .. ..$ N=     : list()
##   .. .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_integer&amp;quot; &amp;quot;collector&amp;quot;
##   ..$ default: list()
##   .. ..- attr(*, &amp;quot;class&amp;quot;)= chr  &amp;quot;collector_guess&amp;quot; &amp;quot;collector&amp;quot;
##   ..- attr(*, &amp;quot;class&amp;quot;)= chr &amp;quot;col_spec&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a complete list of collector functions, you can take a look at the &lt;a href=&#34;https://cran.r-project.org/web/packages/readr/readr.pdf&#34;&gt;&lt;code&gt;collector&lt;/code&gt;&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;If you are working on large datasets you may prefer handling the data in smaller parts. In &lt;code&gt;readr&lt;/code&gt; you can achieve this with the combination of &lt;code&gt;skip&lt;/code&gt; and &lt;code&gt;n_max&lt;/code&gt; arguments.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(read_delim(&amp;quot;happiness.csv&amp;quot;, delim = &amp;quot;,&amp;quot;,
                skip=2, n_max= 4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Missing column names filled in: &amp;#39;X1&amp;#39; [1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   X1 = col_character(),
##   Female = col_character(),
##   `7.3` = col_double(),
##   `570` = col_integer()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 4
##   X1    Female `7.3` `570`
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1 &amp;lt;NA&amp;gt;  Both    7.30  1041
## 2 BE    Male    7.80   468
## 3 &amp;lt;NA&amp;gt;  Female  7.80   542
## 4 &amp;lt;NA&amp;gt;  Both    7.80  1010&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We skipped two rows and then read four lines. There is something wrong though! Since the &lt;code&gt;col_names&lt;/code&gt; is true by default the first line is used for the column names. Therefore, we need to manually specify the column names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(read_delim(&amp;quot;happiness2.csv&amp;quot;, delim = &amp;quot;,&amp;quot;,
                              col_names = c(&amp;quot;Country&amp;quot;,&amp;quot;Gender&amp;quot;, &amp;quot;Mean&amp;quot;, &amp;quot;N&amp;quot;), 
                              skip=2, n_max= 4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   Country = col_character(),
##   Gender = col_character(),
##   Mean = col_double(),
##   N = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 4
##   Country Gender  Mean N    
##   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;
## 1 &amp;#39;       Both    7.30 1041&amp;#39;
## 2 &amp;#39;BE     Male    7.80 468&amp;#39; 
## 3 &amp;#39;       Female  7.80 542&amp;#39; 
## 4 &amp;#39;       Both    7.80 1010&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like the &lt;code&gt;utils&lt;/code&gt; package &lt;code&gt;readr&lt;/code&gt; provides alternatives to &lt;code&gt;read_delim()&lt;/code&gt;. The &lt;a href=&#34;https://cran.r-project.org/web/packages/readr/readr.pdf&#34;&gt;&lt;code&gt;read_csv()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/readr/readr.pdf&#34;&gt;&lt;code&gt;read_tsv()&lt;/code&gt;&lt;/a&gt; are used for CSV files and tab-delimited files, respectively. The functions of both packages are presented below. Notice the &lt;code&gt;_&lt;/code&gt; is used in &lt;code&gt;readr&lt;/code&gt; instead of the &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;utils&lt;/th&gt;
&lt;th&gt;readr&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;read.table()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;read_delim()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;read.csv()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;read_csv()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;read.delim()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;read.tsv&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;data.table-yet-another-alternative-to-read-data-into-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;a href=&#34;http://www.rdocumentation.org/packages/data.table&#34;&gt;&lt;code&gt;data.table&lt;/code&gt;&lt;/a&gt; … yet another alternative to read data into R&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;data.table&lt;/code&gt; package is designed mainly for fast data manipulation. It also features a powerful function to import your data into R, the &lt;a href=&#34;http://www.rdocumentation.org/packages/data.table/functions/fread&#34;&gt;&lt;code&gt;fread()&lt;/code&gt;&lt;/a&gt;. Once more you need to install and load the package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;data.table&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(data.table)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see how it works with two versions of our dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(fread(&amp;quot;happiness.csv&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Country Gender Mean   N=
## 1:      AT   Male  7.3  471
## 2:         Female  7.3  570
## 3:           Both  7.3 1041
## 4:      BE   Male  7.8  468
## 5:         Female  7.8  542
## 6:           Both  7.8 1010&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(fread(&amp;quot;happiness2.csv&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     V1     V2  V3    V4
## 1: &amp;#39;AT   Male 7.3  471&amp;#39;
## 2:   &amp;#39; Female 7.3  570&amp;#39;
## 3:   &amp;#39;   Both 7.3 1041&amp;#39;
## 4: &amp;#39;BE   Male 7.8  468&amp;#39;
## 5:   &amp;#39; Female 7.8  542&amp;#39;
## 6:   &amp;#39;   Both 7.8 1010&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember that the first row of &lt;code&gt;happiness2.csv&lt;/code&gt; does not contain the column names. That’s not a problem for &lt;code&gt;fread()&lt;/code&gt; as it automatically assignees names to the columns. As in this case, often simply specifying the path to the file is enough to successfully import your flat file using &lt;code&gt;fread&lt;/code&gt;. Moreover, it can infer the column types and separators.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(fread(&amp;quot;happiness.csv&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Classes &amp;#39;data.table&amp;#39; and &amp;#39;data.frame&amp;#39;:   105 obs. of  4 variables:
##  $ Country: chr  &amp;quot;AT&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;BE&amp;quot; ...
##  $ Gender : chr  &amp;quot;Male&amp;quot; &amp;quot;Female&amp;quot; &amp;quot;Both&amp;quot; &amp;quot;Male&amp;quot; ...
##  $ Mean   : num  7.3 7.3 7.3 7.8 7.8 7.8 5.8 5.8 5.8 7.8 ...
##  $ N=     : int  471 570 1041 468 542 1010 416 555 971 433 ...
##  - attr(*, &amp;quot;.internal.selfref&amp;quot;)=&amp;lt;externalptr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Two more useful arguments of &lt;code&gt;fread()&lt;/code&gt; are &lt;code&gt;drop&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt;. They enable you to drop or select variables of interest in your flat file. Suppose I want to select the 2nd and 3rd column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(fread(&amp;quot;happiness.csv&amp;quot;, select = c(2,3)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Gender Mean
## 1:   Male  7.3
## 2: Female  7.3
## 3:   Both  7.3
## 4:   Male  7.8
## 5: Female  7.8
## 6:   Both  7.8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(fread(&amp;quot;happiness.csv&amp;quot;, select = c(&amp;quot;Gender&amp;quot;,&amp;quot;Mean&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Gender Mean
## 1:   Male  7.3
## 2: Female  7.3
## 3:   Both  7.3
## 4:   Male  7.8
## 5: Female  7.8
## 6:   Both  7.8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(fread(&amp;quot;happiness.csv&amp;quot;, drop = c(1,4)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Gender Mean
## 1:   Male  7.3
## 2: Female  7.3
## 3:   Both  7.3
## 4:   Male  7.8
## 5: Female  7.8
## 6:   Both  7.8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which is equivalent to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(fread(&amp;quot;happiness.csv&amp;quot;, drop = c(&amp;quot;Country&amp;quot;,&amp;quot;N=&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In short, &lt;code&gt;fread()&lt;/code&gt; saves you work by automatically guessing the delimiter, whether or not the file has a header, how many lines to skip by default, providing an easy way to select variables and more. Nevertheless, if you wish to specify them, you can do it, along with other arguments. Check the &lt;a href=&#34;http://www.rdocumentation.org/packages/data.table/functions/fread&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comment&lt;/strong&gt; You might have noticed by now that the &lt;code&gt;fread()&lt;/code&gt; function produces data frames that look slightly different when you print them out. That’s because another class is assigned to the resulting data frames, namely &lt;code&gt;data.table&lt;/code&gt; and &lt;code&gt;data.frame&lt;/code&gt;. &lt;code&gt;read_delim()&lt;/code&gt; creates an object with three classes: &lt;code&gt;tbl_df&lt;/code&gt;, &lt;code&gt;tbl&lt;/code&gt; and &lt;code&gt;data.frame&lt;/code&gt;. The printout of such data.table objects is different. Well, it allows for a different treatment of the printouts, for example.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;when-to-use-read.table-read_delim-or-fread&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;When to use &lt;code&gt;read.table()&lt;/code&gt;, &lt;code&gt;read_delim()&lt;/code&gt; or &lt;code&gt;fread()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In a nutshell, the main differences between these functions are : the &lt;code&gt;read_&lt;/code&gt; functions from the &lt;code&gt;readr&lt;/code&gt; package have more consistent naming scheme for the parameters (e.g. &lt;code&gt;col_names&lt;/code&gt; and &lt;code&gt;col_types&lt;/code&gt;) than &lt;code&gt;read.&lt;/code&gt; and all functions work exactly the same way regardless of the current locale (to override the US-centric defaults, use &lt;code&gt;locale()&lt;/code&gt;). It is also faster! But &lt;code&gt;fread()&lt;/code&gt; is even faster! And it saves you work by automatically guessing parameters. This &lt;a href=&#34;https://cran.r-project.org/web/packages/readr/README.html&#34;&gt;README&lt;/a&gt; goes in more detail.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Speed&lt;/th&gt;
&lt;th&gt;Auto-detection&lt;/th&gt;
&lt;th&gt;Locale&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;read.table()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;fast&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;YES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;read_delim()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;faster&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;fread()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;fastest&lt;/td&gt;
&lt;td&gt;YES&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;With some loss of generality a few suggestions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for large files (many MB-GB) &lt;code&gt;fread()&lt;/code&gt; will be the fastest (with a few &lt;a href=&#34;http://stackoverflow.com/questions/32263566/comparing-speed-of-fread-vs-read-table-for-reading-the-first-1m-rows-out-of-100&#34;&gt;exceptions&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;the consistency and independence of the actual locale makes &lt;code&gt;readr&lt;/code&gt; a good candidate for everyday use&lt;/li&gt;
&lt;li&gt;if you are new to all these using &lt;code&gt;read.table()&lt;/code&gt; will allow you to develop intuition on how R works.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Development and External Validation of Prediction Models for 10-Year Survival of Invasive Breast Cancer. Comparison with PREDICT and CancerMath</title>
      <link>/publication/clinicalcancerresearch/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/clinicalcancerresearch/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>/talk/example-talk/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/talk/example-talk/</guid>
      <description>&lt;p&gt;Embed your slides or video here using &lt;a href=&#34;https://sourcethemes.com/academic/post/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;shortcodes&lt;/a&gt;. Further details can easily be added using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ventilatory limitation and dynamic hyperinflation during exercise testing in Cystic Fibrosis</title>
      <link>/publication/ventilatorylimitation/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/ventilatorylimitation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Deep Learning</title>
      <link>/project/deep-learning/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/deep-learning/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>/project/example-external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/example-external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Academic: the website designer for Hugo</title>
      <link>/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0100</pubDate>
      
      <guid>/post/getting-started/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Academic&lt;/strong&gt; is a framework to help you create a beautiful website quickly. Perfect for personal sites, blogs, or business/project sites. &lt;a href=&#34;https://themes.gohugo.io/theme/academic/&#34; target=&#34;_blank&#34;&gt;Check out the latest demo&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes. Then head on over to the &lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Quick Start guide&lt;/a&gt; or take a look at the &lt;a href=&#34;https://sourcethemes.com/academic/updates/&#34; target=&#34;_blank&#34;&gt;Release Notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/academic.png&#34; alt=&#34;Screenshot&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Key features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easily manage various content including homepage, blog posts, publications, talks, and projects&lt;/li&gt;
&lt;li&gt;Extensible via &lt;strong&gt;color themes&lt;/strong&gt; and &lt;strong&gt;widgets/plugins&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Write in &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34;&gt;Markdown&lt;/a&gt; for easy formatting and code highlighting, with &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34;&gt;LaTeX&lt;/a&gt; for mathematical expressions&lt;/li&gt;
&lt;li&gt;Social/academic network linking, &lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34;&gt;Google Analytics&lt;/a&gt;, and &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34;&gt;Disqus&lt;/a&gt; comments&lt;/li&gt;
&lt;li&gt;Responsive and mobile friendly&lt;/li&gt;
&lt;li&gt;Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;Multilingual and easy to customize&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;color-themes&#34;&gt;Color Themes&lt;/h2&gt;

&lt;p&gt;Academic is available in different color themes and font themes.&lt;/p&gt;



&lt;div class=&#34;gallery&#34;&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;Default&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-default.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-default.png&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;Ocean&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-ocean.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-ocean.png&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;Dark&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-dark.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-dark.png&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;Default&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-forest.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-forest.png&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;Coffee theme with Playfair font&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-coffee-playfair.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-coffee-playfair.png&#34;&gt;
  &lt;/a&gt;
  
  
  
  
    
  
  &lt;a data-fancybox=&#34;gallery-1&#34; data-caption=&#34;1950s&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-1950s.png&#34;&gt;
    &lt;img alt=&#34;&#34; src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/images/theme-1950s.png&#34;&gt;
  &lt;/a&gt;
  
&lt;/div&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;You can choose from one of the following four methods to install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one-click install using your web browser (recommended)&lt;/li&gt;
&lt;li&gt;install on your computer using Git with the Command Prompt/Terminal app&lt;/li&gt;
&lt;li&gt;install on your computer by downloading the ZIP files&lt;/li&gt;
&lt;li&gt;install on your computer with RStudio&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;quick-install-using-your-web-browser&#34;&gt;Quick install using your web browser&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://app.netlify.com/start/deploy?repository=https://github.com/sourcethemes/academic-kickstart&#34; target=&#34;_blank&#34;&gt;Install Academic with Netlify&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Netlify will provide you with a customizable URL to access your new site&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;On GitHub, go to your newly created &lt;code&gt;academic-kickstart&lt;/code&gt; repository and edit &lt;code&gt;config.toml&lt;/code&gt; to personalize your site. Shortly after saving the file, your site will automatically update&lt;/li&gt;
&lt;li&gt;Read the &lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Quick Start Guide&lt;/a&gt; to learn how to add Markdown content. For inspiration, refer to the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite&#34; target=&#34;_blank&#34;&gt;Markdown content&lt;/a&gt; which powers the &lt;a href=&#34;https://themes.gohugo.io/theme/academic/&#34; target=&#34;_blank&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;install-with-git&#34;&gt;Install with Git&lt;/h3&gt;

&lt;p&gt;Prerequisites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34; target=&#34;_blank&#34;&gt;Download and install Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/installing/#quick-install&#34; target=&#34;_blank&#34;&gt;Download and install Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-kickstart#fork-destination-box&#34; target=&#34;_blank&#34;&gt;Fork&lt;/a&gt; the &lt;em&gt;Academic Kickstart&lt;/em&gt; repository and clone your fork with Git:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/sourcethemes/academic-kickstart.git My_Website
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note that if you forked Academic Kickstart, the above command should be edited to clone your fork, i.e. replace &lt;code&gt;sourcethemes&lt;/code&gt; with your GitHub username.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Initialize the theme:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd My_Website
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;install-with-zip&#34;&gt;Install with ZIP&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-kickstart/archive/master.zip&#34; target=&#34;_blank&#34;&gt;Download&lt;/a&gt; and extract &lt;em&gt;Academic Kickstart&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic/archive/master.zip&#34; target=&#34;_blank&#34;&gt;Download&lt;/a&gt; and extract the &lt;em&gt;Academic theme&lt;/em&gt; to the &lt;code&gt;themes/academic/&lt;/code&gt; folder from the above step&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;install-with-rstudio&#34;&gt;Install with RStudio&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34; target=&#34;_blank&#34;&gt;View the guide to installing Academic with RStudio&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;quick-start&#34;&gt;Quick start&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If you installed on your computer, view your new website by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now visit &lt;a href=&#34;http://localhost:1313&#34; target=&#34;_blank&#34;&gt;localhost:1313&lt;/a&gt; and your new Academic powered website will appear. Otherwise, if using Netlify, they will provide you with your URL.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Read the &lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Quick Start Guide&lt;/a&gt; to learn how to add Markdown content, customize your site, and deploy it. For inspiration, refer to the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite&#34; target=&#34;_blank&#34;&gt;Markdown content&lt;/a&gt; which powers the &lt;a href=&#34;https://themes.gohugo.io/theme/academic/&#34; target=&#34;_blank&#34;&gt;Demo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build your site by running the &lt;code&gt;hugo&lt;/code&gt; command. Then &lt;a href=&#34;https://georgecushen.com/create-your-website-with-hugo/&#34; target=&#34;_blank&#34;&gt;host it for free using Github Pages&lt;/a&gt; or Netlify (refer to the first installation method). Alternatively, copy the generated &lt;code&gt;public/&lt;/code&gt; directory (by FTP, Rsync, etc.) to your production web server (such as a university&amp;rsquo;s hosting service).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;updating&#34;&gt;Updating&lt;/h2&gt;

&lt;p&gt;Feel free to &lt;em&gt;star&lt;/em&gt; the project on &lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt; to help keep track of updates and check out the &lt;a href=&#34;https://sourcethemes.com/academic/updates&#34; target=&#34;_blank&#34;&gt;release notes&lt;/a&gt; prior to updating your site.&lt;/p&gt;

&lt;p&gt;Before updating the framework, it is recommended to make a backup of your entire website directory (or at least your &lt;code&gt;themes/academic&lt;/code&gt; directory) and record your current version number.&lt;/p&gt;

&lt;p&gt;By default, Academic is installed as a Git submodule which can be updated by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule update --remote --merge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34; target=&#34;_blank&#34;&gt;Check out the update guide&lt;/a&gt; for full instructions and alternative methods.&lt;/p&gt;

&lt;h2 id=&#34;feedback-contributing&#34;&gt;Feedback &amp;amp; Contributing&lt;/h2&gt;

&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues&#34; target=&#34;_blank&#34;&gt;issue tracker&lt;/a&gt; to let me know about any bugs or feature requests, or alternatively make a pull request.&lt;/p&gt;

&lt;p&gt;For support, head over to the &lt;a href=&#34;http://discuss.gohugo.io&#34; target=&#34;_blank&#34;&gt;Hugo discussion forum&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Copyright 2016-present &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/blob/master/LICENSE.md&#34; target=&#34;_blank&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Isocapnic hyperpnea with a portable device in Cystic Fibrosis: an agreement study between two different set-up modalities</title>
      <link>/publication/isocapnichyperpnea/</link>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/publication/isocapnichyperpnea/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cystic fibrosis patients’ performance on Modified Shuttle Walk Test</title>
      <link>/publication/mst/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/publication/mst/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Exercise intensity during interactive video game</title>
      <link>/publication/exerciseintensity/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/publication/exerciseintensity/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Quantifying weight bearing activity in children and adolescents with cystic fibrosis</title>
      <link>/publication/quantifyingweight/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/publication/quantifyingweight/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Adherence to the administration of aerosolized promixin with the I-neb adaptive aerosol delivery (AAD) system, lung function and administration times in patients with cystic fibrosis (CF)</title>
      <link>/publication/adherence/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>/publication/adherence/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Exercise and sport habits in children and adolescents with cystic fibrosis</title>
      <link>/publication/exerciseandsporthabits/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>/publication/exerciseandsporthabits/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
